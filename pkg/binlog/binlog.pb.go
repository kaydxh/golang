// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.13.0
// source: pkg/binlog/binlog.proto

package binlog

import (
	duration "github.com/golang/protobuf/ptypes/duration"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type BinlogType int32

const (
	BinlogType_BinlogType_DB   BinlogType = 0
	BinlogType_BinlogType_File BinlogType = 1
)

// Enum value maps for BinlogType.
var (
	BinlogType_name = map[int32]string{
		0: "BinlogType_DB",
		1: "BinlogType_File",
	}
	BinlogType_value = map[string]int32{
		"BinlogType_DB":   0,
		"BinlogType_File": 1,
	}
)

func (x BinlogType) Enum() *BinlogType {
	p := new(BinlogType)
	*p = x
	return p
}

func (x BinlogType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BinlogType) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_binlog_binlog_proto_enumTypes[0].Descriptor()
}

func (BinlogType) Type() protoreflect.EnumType {
	return &file_pkg_binlog_binlog_proto_enumTypes[0]
}

func (x BinlogType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BinlogType.Descriptor instead.
func (BinlogType) EnumDescriptor() ([]byte, []int) {
	return file_pkg_binlog_binlog_proto_rawDescGZIP(), []int{0}
}

type Binlog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled          bool               `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	BinlogType       BinlogType         `protobuf:"varint,2,opt,name=binlog_type,json=binlogType,proto3,enum=go.pkg.binlog.BinlogType" json:"binlog_type,omitempty"`
	FlushBatchSize   int64              `protobuf:"varint,3,opt,name=flush_batch_size,json=flushBatchSize,proto3" json:"flush_batch_size,omitempty"`
	MaxFlushInterval *duration.Duration `protobuf:"bytes,4,opt,name=max_flush_interval,json=maxFlushInterval,proto3" json:"max_flush_interval,omitempty"`
	FlushTimeout     *duration.Duration `protobuf:"bytes,5,opt,name=flush_timeout,json=flushTimeout,proto3" json:"flush_timeout,omitempty"`
	DbLog            *Binlog_DBLog      `protobuf:"bytes,20,opt,name=db_log,json=dbLog,proto3" json:"db_log,omitempty"`
	FileLog          *Binlog_FileLog    `protobuf:"bytes,21,opt,name=file_log,json=fileLog,proto3" json:"file_log,omitempty"`
}

func (x *Binlog) Reset() {
	*x = Binlog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_binlog_binlog_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Binlog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Binlog) ProtoMessage() {}

func (x *Binlog) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_binlog_binlog_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Binlog.ProtoReflect.Descriptor instead.
func (*Binlog) Descriptor() ([]byte, []int) {
	return file_pkg_binlog_binlog_proto_rawDescGZIP(), []int{0}
}

func (x *Binlog) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *Binlog) GetBinlogType() BinlogType {
	if x != nil {
		return x.BinlogType
	}
	return BinlogType_BinlogType_DB
}

func (x *Binlog) GetFlushBatchSize() int64 {
	if x != nil {
		return x.FlushBatchSize
	}
	return 0
}

func (x *Binlog) GetMaxFlushInterval() *duration.Duration {
	if x != nil {
		return x.MaxFlushInterval
	}
	return nil
}

func (x *Binlog) GetFlushTimeout() *duration.Duration {
	if x != nil {
		return x.FlushTimeout
	}
	return nil
}

func (x *Binlog) GetDbLog() *Binlog_DBLog {
	if x != nil {
		return x.DbLog
	}
	return nil
}

func (x *Binlog) GetFileLog() *Binlog_FileLog {
	if x != nil {
		return x.FileLog
	}
	return nil
}

type Binlog_DBLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Binlog_DBLog) Reset() {
	*x = Binlog_DBLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_binlog_binlog_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Binlog_DBLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Binlog_DBLog) ProtoMessage() {}

func (x *Binlog_DBLog) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_binlog_binlog_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Binlog_DBLog.ProtoReflect.Descriptor instead.
func (*Binlog_DBLog) Descriptor() ([]byte, []int) {
	return file_pkg_binlog_binlog_proto_rawDescGZIP(), []int{0, 0}
}

type Binlog_FileLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filepath       string             `protobuf:"bytes,3,opt,name=filepath,proto3" json:"filepath,omitempty"`
	MaxAge         *duration.Duration `protobuf:"bytes,4,opt,name=max_age,json=maxAge,proto3" json:"max_age,omitempty"`
	MaxCount       int64              `protobuf:"varint,5,opt,name=max_count,json=maxCount,proto3" json:"max_count,omitempty"`
	RotateInterval *duration.Duration `protobuf:"bytes,6,opt,name=rotate_interval,json=rotateInterval,proto3" json:"rotate_interval,omitempty"`
	RotateSize     int64              `protobuf:"varint,7,opt,name=rotate_size,json=rotateSize,proto3" json:"rotate_size,omitempty"`
}

func (x *Binlog_FileLog) Reset() {
	*x = Binlog_FileLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_binlog_binlog_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Binlog_FileLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Binlog_FileLog) ProtoMessage() {}

func (x *Binlog_FileLog) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_binlog_binlog_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Binlog_FileLog.ProtoReflect.Descriptor instead.
func (*Binlog_FileLog) Descriptor() ([]byte, []int) {
	return file_pkg_binlog_binlog_proto_rawDescGZIP(), []int{0, 1}
}

func (x *Binlog_FileLog) GetFilepath() string {
	if x != nil {
		return x.Filepath
	}
	return ""
}

func (x *Binlog_FileLog) GetMaxAge() *duration.Duration {
	if x != nil {
		return x.MaxAge
	}
	return nil
}

func (x *Binlog_FileLog) GetMaxCount() int64 {
	if x != nil {
		return x.MaxCount
	}
	return 0
}

func (x *Binlog_FileLog) GetRotateInterval() *duration.Duration {
	if x != nil {
		return x.RotateInterval
	}
	return nil
}

func (x *Binlog_FileLog) GetRotateSize() int64 {
	if x != nil {
		return x.RotateSize
	}
	return 0
}

var File_pkg_binlog_binlog_proto protoreflect.FileDescriptor

var file_pkg_binlog_binlog_proto_rawDesc = []byte{
	0x0a, 0x17, 0x70, 0x6b, 0x67, 0x2f, 0x62, 0x69, 0x6e, 0x6c, 0x6f, 0x67, 0x2f, 0x62, 0x69, 0x6e,
	0x6c, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x67, 0x6f, 0x2e, 0x70, 0x6b,
	0x67, 0x2e, 0x62, 0x69, 0x6e, 0x6c, 0x6f, 0x67, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe6, 0x04, 0x0a, 0x06, 0x42, 0x69, 0x6e,
	0x6c, 0x6f, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x3a, 0x0a,
	0x0b, 0x62, 0x69, 0x6e, 0x6c, 0x6f, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x62, 0x69, 0x6e, 0x6c,
	0x6f, 0x67, 0x2e, 0x42, 0x69, 0x6e, 0x6c, 0x6f, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x62,
	0x69, 0x6e, 0x6c, 0x6f, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x66, 0x6c, 0x75,
	0x73, 0x68, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0e, 0x66, 0x6c, 0x75, 0x73, 0x68, 0x42, 0x61, 0x74, 0x63, 0x68, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x47, 0x0a, 0x12, 0x6d, 0x61, 0x78, 0x5f, 0x66, 0x6c, 0x75, 0x73, 0x68,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x6d, 0x61, 0x78, 0x46,
	0x6c, 0x75, 0x73, 0x68, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x3e, 0x0a, 0x0d,
	0x66, 0x6c, 0x75, 0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c,
	0x66, 0x6c, 0x75, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x32, 0x0a, 0x06,
	0x64, 0x62, 0x5f, 0x6c, 0x6f, 0x67, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x62, 0x69, 0x6e, 0x6c, 0x6f, 0x67, 0x2e, 0x42, 0x69, 0x6e,
	0x6c, 0x6f, 0x67, 0x2e, 0x44, 0x42, 0x4c, 0x6f, 0x67, 0x52, 0x05, 0x64, 0x62, 0x4c, 0x6f, 0x67,
	0x12, 0x38, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6c, 0x6f, 0x67, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x62, 0x69, 0x6e, 0x6c,
	0x6f, 0x67, 0x2e, 0x42, 0x69, 0x6e, 0x6c, 0x6f, 0x67, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x4c, 0x6f,
	0x67, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x1a, 0x07, 0x0a, 0x05, 0x44, 0x42,
	0x4c, 0x6f, 0x67, 0x1a, 0xdb, 0x01, 0x0a, 0x07, 0x46, 0x69, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x12,
	0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x70, 0x61, 0x74, 0x68, 0x12, 0x32, 0x0a, 0x07, 0x6d,
	0x61, 0x78, 0x5f, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x6d, 0x61, 0x78, 0x41, 0x67, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x42, 0x0a, 0x0f,
	0x72, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0e, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x2a, 0x34, 0x0a, 0x0a, 0x42, 0x69, 0x6e, 0x6c, 0x6f, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x11, 0x0a, 0x0d, 0x42, 0x69, 0x6e, 0x6c, 0x6f, 0x67, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x44, 0x42,
	0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x42, 0x69, 0x6e, 0x6c, 0x6f, 0x67, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x46, 0x69, 0x6c, 0x65, 0x10, 0x01, 0x42, 0x28, 0x5a, 0x26, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6b, 0x61, 0x79, 0x64, 0x78, 0x68, 0x2f, 0x67, 0x6f, 0x2e,
	0x70, 0x6b, 0x67, 0x2e, 0x62, 0x69, 0x6e, 0x6c, 0x6f, 0x67, 0x3b, 0x62, 0x69, 0x6e, 0x6c, 0x6f,
	0x67, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pkg_binlog_binlog_proto_rawDescOnce sync.Once
	file_pkg_binlog_binlog_proto_rawDescData = file_pkg_binlog_binlog_proto_rawDesc
)

func file_pkg_binlog_binlog_proto_rawDescGZIP() []byte {
	file_pkg_binlog_binlog_proto_rawDescOnce.Do(func() {
		file_pkg_binlog_binlog_proto_rawDescData = protoimpl.X.CompressGZIP(file_pkg_binlog_binlog_proto_rawDescData)
	})
	return file_pkg_binlog_binlog_proto_rawDescData
}

var file_pkg_binlog_binlog_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_pkg_binlog_binlog_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_pkg_binlog_binlog_proto_goTypes = []interface{}{
	(BinlogType)(0),           // 0: go.pkg.binlog.BinlogType
	(*Binlog)(nil),            // 1: go.pkg.binlog.Binlog
	(*Binlog_DBLog)(nil),      // 2: go.pkg.binlog.Binlog.DBLog
	(*Binlog_FileLog)(nil),    // 3: go.pkg.binlog.Binlog.FileLog
	(*duration.Duration)(nil), // 4: google.protobuf.Duration
}
var file_pkg_binlog_binlog_proto_depIdxs = []int32{
	0, // 0: go.pkg.binlog.Binlog.binlog_type:type_name -> go.pkg.binlog.BinlogType
	4, // 1: go.pkg.binlog.Binlog.max_flush_interval:type_name -> google.protobuf.Duration
	4, // 2: go.pkg.binlog.Binlog.flush_timeout:type_name -> google.protobuf.Duration
	2, // 3: go.pkg.binlog.Binlog.db_log:type_name -> go.pkg.binlog.Binlog.DBLog
	3, // 4: go.pkg.binlog.Binlog.file_log:type_name -> go.pkg.binlog.Binlog.FileLog
	4, // 5: go.pkg.binlog.Binlog.FileLog.max_age:type_name -> google.protobuf.Duration
	4, // 6: go.pkg.binlog.Binlog.FileLog.rotate_interval:type_name -> google.protobuf.Duration
	7, // [7:7] is the sub-list for method output_type
	7, // [7:7] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_pkg_binlog_binlog_proto_init() }
func file_pkg_binlog_binlog_proto_init() {
	if File_pkg_binlog_binlog_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pkg_binlog_binlog_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Binlog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_binlog_binlog_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Binlog_DBLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_binlog_binlog_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Binlog_FileLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pkg_binlog_binlog_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_pkg_binlog_binlog_proto_goTypes,
		DependencyIndexes: file_pkg_binlog_binlog_proto_depIdxs,
		EnumInfos:         file_pkg_binlog_binlog_proto_enumTypes,
		MessageInfos:      file_pkg_binlog_binlog_proto_msgTypes,
	}.Build()
	File_pkg_binlog_binlog_proto = out.File
	file_pkg_binlog_binlog_proto_rawDesc = nil
	file_pkg_binlog_binlog_proto_goTypes = nil
	file_pkg_binlog_binlog_proto_depIdxs = nil
}
