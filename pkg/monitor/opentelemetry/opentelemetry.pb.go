/*
 *Copyright (c) 2022, kaydxh
 *
 *Permission is hereby granted, free of charge, to any person obtaining a copy
 *of this software and associated documentation files (the "Software"), to deal
 *in the Software without restriction, including without limitation the rights
 *to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *copies of the Software, and to permit persons to whom the Software is
 *furnished to do so, subject to the following conditions:
 *
 *The above copyright notice and this permission notice shall be included in all
 *copies or substantial portions of the Software.
 *
 *THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *SOFTWARE.
 */
// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        v3.13.0
// source: pkg/monitor/opentelemetry/opentelemetry.proto

package opentelemetry

import (
	duration "github.com/golang/protobuf/ptypes/duration"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Monitor_OpenTelemetry_OtelTraceExporterType int32

const (
	Monitor_OpenTelemetry_trace_none   Monitor_OpenTelemetry_OtelTraceExporterType = 0
	Monitor_OpenTelemetry_trace_stdout Monitor_OpenTelemetry_OtelTraceExporterType = 1
	Monitor_OpenTelemetry_trace_otlp   Monitor_OpenTelemetry_OtelTraceExporterType = 2
	Monitor_OpenTelemetry_trace_jaeger Monitor_OpenTelemetry_OtelTraceExporterType = 3
	Monitor_OpenTelemetry_trace_zipkin Monitor_OpenTelemetry_OtelTraceExporterType = 4
)

// Enum value maps for Monitor_OpenTelemetry_OtelTraceExporterType.
var (
	Monitor_OpenTelemetry_OtelTraceExporterType_name = map[int32]string{
		0: "trace_none",
		1: "trace_stdout",
		2: "trace_otlp",
		3: "trace_jaeger",
		4: "trace_zipkin",
	}
	Monitor_OpenTelemetry_OtelTraceExporterType_value = map[string]int32{
		"trace_none":   0,
		"trace_stdout": 1,
		"trace_otlp":   2,
		"trace_jaeger": 3,
		"trace_zipkin": 4,
	}
)

func (x Monitor_OpenTelemetry_OtelTraceExporterType) Enum() *Monitor_OpenTelemetry_OtelTraceExporterType {
	p := new(Monitor_OpenTelemetry_OtelTraceExporterType)
	*p = x
	return p
}

func (x Monitor_OpenTelemetry_OtelTraceExporterType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Monitor_OpenTelemetry_OtelTraceExporterType) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_monitor_opentelemetry_opentelemetry_proto_enumTypes[0].Descriptor()
}

func (Monitor_OpenTelemetry_OtelTraceExporterType) Type() protoreflect.EnumType {
	return &file_pkg_monitor_opentelemetry_opentelemetry_proto_enumTypes[0]
}

func (x Monitor_OpenTelemetry_OtelTraceExporterType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Monitor_OpenTelemetry_OtelTraceExporterType.Descriptor instead.
func (Monitor_OpenTelemetry_OtelTraceExporterType) EnumDescriptor() ([]byte, []int) {
	return file_pkg_monitor_opentelemetry_opentelemetry_proto_rawDescGZIP(), []int{0, 0, 0}
}

type Monitor_OpenTelemetry_OtelMetricExporterType int32

const (
	Monitor_OpenTelemetry_metric_none       Monitor_OpenTelemetry_OtelMetricExporterType = 0
	Monitor_OpenTelemetry_metric_stdout     Monitor_OpenTelemetry_OtelMetricExporterType = 1
	Monitor_OpenTelemetry_metric_otlp       Monitor_OpenTelemetry_OtelMetricExporterType = 2
	Monitor_OpenTelemetry_metric_prometheus Monitor_OpenTelemetry_OtelMetricExporterType = 3
)

// Enum value maps for Monitor_OpenTelemetry_OtelMetricExporterType.
var (
	Monitor_OpenTelemetry_OtelMetricExporterType_name = map[int32]string{
		0: "metric_none",
		1: "metric_stdout",
		2: "metric_otlp",
		3: "metric_prometheus",
	}
	Monitor_OpenTelemetry_OtelMetricExporterType_value = map[string]int32{
		"metric_none":       0,
		"metric_stdout":     1,
		"metric_otlp":       2,
		"metric_prometheus": 3,
	}
)

func (x Monitor_OpenTelemetry_OtelMetricExporterType) Enum() *Monitor_OpenTelemetry_OtelMetricExporterType {
	p := new(Monitor_OpenTelemetry_OtelMetricExporterType)
	*p = x
	return p
}

func (x Monitor_OpenTelemetry_OtelMetricExporterType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Monitor_OpenTelemetry_OtelMetricExporterType) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_monitor_opentelemetry_opentelemetry_proto_enumTypes[1].Descriptor()
}

func (Monitor_OpenTelemetry_OtelMetricExporterType) Type() protoreflect.EnumType {
	return &file_pkg_monitor_opentelemetry_opentelemetry_proto_enumTypes[1]
}

func (x Monitor_OpenTelemetry_OtelMetricExporterType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Monitor_OpenTelemetry_OtelMetricExporterType.Descriptor instead.
func (Monitor_OpenTelemetry_OtelMetricExporterType) EnumDescriptor() ([]byte, []int) {
	return file_pkg_monitor_opentelemetry_opentelemetry_proto_rawDescGZIP(), []int{0, 0, 1}
}

type Monitor_OpenTelemetry_OtelLogExporterType int32

const (
	Monitor_OpenTelemetry_log_none Monitor_OpenTelemetry_OtelLogExporterType = 0
	Monitor_OpenTelemetry_log_otlp Monitor_OpenTelemetry_OtelLogExporterType = 1
)

// Enum value maps for Monitor_OpenTelemetry_OtelLogExporterType.
var (
	Monitor_OpenTelemetry_OtelLogExporterType_name = map[int32]string{
		0: "log_none",
		1: "log_otlp",
	}
	Monitor_OpenTelemetry_OtelLogExporterType_value = map[string]int32{
		"log_none": 0,
		"log_otlp": 1,
	}
)

func (x Monitor_OpenTelemetry_OtelLogExporterType) Enum() *Monitor_OpenTelemetry_OtelLogExporterType {
	p := new(Monitor_OpenTelemetry_OtelLogExporterType)
	*p = x
	return p
}

func (x Monitor_OpenTelemetry_OtelLogExporterType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Monitor_OpenTelemetry_OtelLogExporterType) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_monitor_opentelemetry_opentelemetry_proto_enumTypes[2].Descriptor()
}

func (Monitor_OpenTelemetry_OtelLogExporterType) Type() protoreflect.EnumType {
	return &file_pkg_monitor_opentelemetry_opentelemetry_proto_enumTypes[2]
}

func (x Monitor_OpenTelemetry_OtelLogExporterType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Monitor_OpenTelemetry_OtelLogExporterType.Descriptor instead.
func (Monitor_OpenTelemetry_OtelLogExporterType) EnumDescriptor() ([]byte, []int) {
	return file_pkg_monitor_opentelemetry_opentelemetry_proto_rawDescGZIP(), []int{0, 0, 2}
}

type Monitor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OpenTelemetry *Monitor_OpenTelemetry `protobuf:"bytes,3,opt,name=open_telemetry,json=openTelemetry,proto3" json:"open_telemetry,omitempty"`
}

func (x *Monitor) Reset() {
	*x = Monitor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_monitor_opentelemetry_opentelemetry_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Monitor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Monitor) ProtoMessage() {}

func (x *Monitor) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_monitor_opentelemetry_opentelemetry_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Monitor.ProtoReflect.Descriptor instead.
func (*Monitor) Descriptor() ([]byte, []int) {
	return file_pkg_monitor_opentelemetry_opentelemetry_proto_rawDescGZIP(), []int{0}
}

func (x *Monitor) GetOpenTelemetry() *Monitor_OpenTelemetry {
	if x != nil {
		return x.OpenTelemetry
	}
	return nil
}

type Monitor_OpenTelemetry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled                bool                                         `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	MetricCollectDuration  *duration.Duration                           `protobuf:"bytes,2,opt,name=metric_collect_duration,json=metricCollectDuration,proto3" json:"metric_collect_duration,omitempty"`
	OtelTraceExporterType  Monitor_OpenTelemetry_OtelTraceExporterType  `protobuf:"varint,3,opt,name=otel_trace_exporter_type,json=otelTraceExporterType,proto3,enum=go.pkg.monitor.opentelemetry.Monitor_OpenTelemetry_OtelTraceExporterType" json:"otel_trace_exporter_type,omitempty"`
	OtelMetricExporterType Monitor_OpenTelemetry_OtelMetricExporterType `protobuf:"varint,4,opt,name=otel_metric_exporter_type,json=otelMetricExporterType,proto3,enum=go.pkg.monitor.opentelemetry.Monitor_OpenTelemetry_OtelMetricExporterType" json:"otel_metric_exporter_type,omitempty"`
	OtelLogExporterType    Monitor_OpenTelemetry_OtelLogExporterType    `protobuf:"varint,5,opt,name=otel_log_exporter_type,json=otelLogExporterType,proto3,enum=go.pkg.monitor.opentelemetry.Monitor_OpenTelemetry_OtelLogExporterType" json:"otel_log_exporter_type,omitempty"`
	OtelMetricExporter     *Monitor_OpenTelemetry_OtelMetricExporter    `protobuf:"bytes,6,opt,name=otel_metric_exporter,json=otelMetricExporter,proto3" json:"otel_metric_exporter,omitempty"`
	OtelTraceExporter      *Monitor_OpenTelemetry_OtelTraceExporter     `protobuf:"bytes,7,opt,name=otel_trace_exporter,json=otelTraceExporter,proto3" json:"otel_trace_exporter,omitempty"`
	Resource               *Monitor_OpenTelemetry_Resource              `protobuf:"bytes,10,opt,name=resource,proto3" json:"resource,omitempty"`
}

func (x *Monitor_OpenTelemetry) Reset() {
	*x = Monitor_OpenTelemetry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_monitor_opentelemetry_opentelemetry_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Monitor_OpenTelemetry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Monitor_OpenTelemetry) ProtoMessage() {}

func (x *Monitor_OpenTelemetry) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_monitor_opentelemetry_opentelemetry_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Monitor_OpenTelemetry.ProtoReflect.Descriptor instead.
func (*Monitor_OpenTelemetry) Descriptor() ([]byte, []int) {
	return file_pkg_monitor_opentelemetry_opentelemetry_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Monitor_OpenTelemetry) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *Monitor_OpenTelemetry) GetMetricCollectDuration() *duration.Duration {
	if x != nil {
		return x.MetricCollectDuration
	}
	return nil
}

func (x *Monitor_OpenTelemetry) GetOtelTraceExporterType() Monitor_OpenTelemetry_OtelTraceExporterType {
	if x != nil {
		return x.OtelTraceExporterType
	}
	return Monitor_OpenTelemetry_trace_none
}

func (x *Monitor_OpenTelemetry) GetOtelMetricExporterType() Monitor_OpenTelemetry_OtelMetricExporterType {
	if x != nil {
		return x.OtelMetricExporterType
	}
	return Monitor_OpenTelemetry_metric_none
}

func (x *Monitor_OpenTelemetry) GetOtelLogExporterType() Monitor_OpenTelemetry_OtelLogExporterType {
	if x != nil {
		return x.OtelLogExporterType
	}
	return Monitor_OpenTelemetry_log_none
}

func (x *Monitor_OpenTelemetry) GetOtelMetricExporter() *Monitor_OpenTelemetry_OtelMetricExporter {
	if x != nil {
		return x.OtelMetricExporter
	}
	return nil
}

func (x *Monitor_OpenTelemetry) GetOtelTraceExporter() *Monitor_OpenTelemetry_OtelTraceExporter {
	if x != nil {
		return x.OtelTraceExporter
	}
	return nil
}

func (x *Monitor_OpenTelemetry) GetResource() *Monitor_OpenTelemetry_Resource {
	if x != nil {
		return x.Resource
	}
	return nil
}

type Monitor_OpenTelemetry_Resource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceName string            `protobuf:"bytes,1,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"` // default use process name
	Attrs       map[string]string `protobuf:"bytes,2,rep,name=attrs,proto3" json:"attrs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Monitor_OpenTelemetry_Resource) Reset() {
	*x = Monitor_OpenTelemetry_Resource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_monitor_opentelemetry_opentelemetry_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Monitor_OpenTelemetry_Resource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Monitor_OpenTelemetry_Resource) ProtoMessage() {}

func (x *Monitor_OpenTelemetry_Resource) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_monitor_opentelemetry_opentelemetry_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Monitor_OpenTelemetry_Resource.ProtoReflect.Descriptor instead.
func (*Monitor_OpenTelemetry_Resource) Descriptor() ([]byte, []int) {
	return file_pkg_monitor_opentelemetry_opentelemetry_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (x *Monitor_OpenTelemetry_Resource) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *Monitor_OpenTelemetry_Resource) GetAttrs() map[string]string {
	if x != nil {
		return x.Attrs
	}
	return nil
}

type Monitor_OpenTelemetry_OtelMetricExporter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Prometheus *Monitor_OpenTelemetry_OtelMetricExporter_Prometheus `protobuf:"bytes,1,opt,name=prometheus,proto3" json:"prometheus,omitempty"`
	Stdout     *Monitor_OpenTelemetry_OtelMetricExporter_Stdout     `protobuf:"bytes,2,opt,name=stdout,proto3" json:"stdout,omitempty"`
}

func (x *Monitor_OpenTelemetry_OtelMetricExporter) Reset() {
	*x = Monitor_OpenTelemetry_OtelMetricExporter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_monitor_opentelemetry_opentelemetry_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Monitor_OpenTelemetry_OtelMetricExporter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Monitor_OpenTelemetry_OtelMetricExporter) ProtoMessage() {}

func (x *Monitor_OpenTelemetry_OtelMetricExporter) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_monitor_opentelemetry_opentelemetry_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Monitor_OpenTelemetry_OtelMetricExporter.ProtoReflect.Descriptor instead.
func (*Monitor_OpenTelemetry_OtelMetricExporter) Descriptor() ([]byte, []int) {
	return file_pkg_monitor_opentelemetry_opentelemetry_proto_rawDescGZIP(), []int{0, 0, 1}
}

func (x *Monitor_OpenTelemetry_OtelMetricExporter) GetPrometheus() *Monitor_OpenTelemetry_OtelMetricExporter_Prometheus {
	if x != nil {
		return x.Prometheus
	}
	return nil
}

func (x *Monitor_OpenTelemetry_OtelMetricExporter) GetStdout() *Monitor_OpenTelemetry_OtelMetricExporter_Stdout {
	if x != nil {
		return x.Stdout
	}
	return nil
}

type Monitor_OpenTelemetry_OtelTraceExporter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Jaeger *Monitor_OpenTelemetry_OtelTraceExporter_Jaeger `protobuf:"bytes,1,opt,name=jaeger,proto3" json:"jaeger,omitempty"`
	Stdout *Monitor_OpenTelemetry_OtelTraceExporter_Stdout `protobuf:"bytes,2,opt,name=stdout,proto3" json:"stdout,omitempty"`
}

func (x *Monitor_OpenTelemetry_OtelTraceExporter) Reset() {
	*x = Monitor_OpenTelemetry_OtelTraceExporter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_monitor_opentelemetry_opentelemetry_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Monitor_OpenTelemetry_OtelTraceExporter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Monitor_OpenTelemetry_OtelTraceExporter) ProtoMessage() {}

func (x *Monitor_OpenTelemetry_OtelTraceExporter) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_monitor_opentelemetry_opentelemetry_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Monitor_OpenTelemetry_OtelTraceExporter.ProtoReflect.Descriptor instead.
func (*Monitor_OpenTelemetry_OtelTraceExporter) Descriptor() ([]byte, []int) {
	return file_pkg_monitor_opentelemetry_opentelemetry_proto_rawDescGZIP(), []int{0, 0, 2}
}

func (x *Monitor_OpenTelemetry_OtelTraceExporter) GetJaeger() *Monitor_OpenTelemetry_OtelTraceExporter_Jaeger {
	if x != nil {
		return x.Jaeger
	}
	return nil
}

func (x *Monitor_OpenTelemetry_OtelTraceExporter) GetStdout() *Monitor_OpenTelemetry_OtelTraceExporter_Stdout {
	if x != nil {
		return x.Stdout
	}
	return nil
}

type Monitor_OpenTelemetry_OtelMetricExporter_Prometheus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *Monitor_OpenTelemetry_OtelMetricExporter_Prometheus) Reset() {
	*x = Monitor_OpenTelemetry_OtelMetricExporter_Prometheus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_monitor_opentelemetry_opentelemetry_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Monitor_OpenTelemetry_OtelMetricExporter_Prometheus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Monitor_OpenTelemetry_OtelMetricExporter_Prometheus) ProtoMessage() {}

func (x *Monitor_OpenTelemetry_OtelMetricExporter_Prometheus) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_monitor_opentelemetry_opentelemetry_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Monitor_OpenTelemetry_OtelMetricExporter_Prometheus.ProtoReflect.Descriptor instead.
func (*Monitor_OpenTelemetry_OtelMetricExporter_Prometheus) Descriptor() ([]byte, []int) {
	return file_pkg_monitor_opentelemetry_opentelemetry_proto_rawDescGZIP(), []int{0, 0, 1, 0}
}

func (x *Monitor_OpenTelemetry_OtelMetricExporter_Prometheus) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type Monitor_OpenTelemetry_OtelMetricExporter_Stdout struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrettyPrint bool `protobuf:"varint,1,opt,name=pretty_print,json=prettyPrint,proto3" json:"pretty_print,omitempty"`
}

func (x *Monitor_OpenTelemetry_OtelMetricExporter_Stdout) Reset() {
	*x = Monitor_OpenTelemetry_OtelMetricExporter_Stdout{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_monitor_opentelemetry_opentelemetry_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Monitor_OpenTelemetry_OtelMetricExporter_Stdout) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Monitor_OpenTelemetry_OtelMetricExporter_Stdout) ProtoMessage() {}

func (x *Monitor_OpenTelemetry_OtelMetricExporter_Stdout) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_monitor_opentelemetry_opentelemetry_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Monitor_OpenTelemetry_OtelMetricExporter_Stdout.ProtoReflect.Descriptor instead.
func (*Monitor_OpenTelemetry_OtelMetricExporter_Stdout) Descriptor() ([]byte, []int) {
	return file_pkg_monitor_opentelemetry_opentelemetry_proto_rawDescGZIP(), []int{0, 0, 1, 1}
}

func (x *Monitor_OpenTelemetry_OtelMetricExporter_Stdout) GetPrettyPrint() bool {
	if x != nil {
		return x.PrettyPrint
	}
	return false
}

type Monitor_OpenTelemetry_OtelTraceExporter_Jaeger struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *Monitor_OpenTelemetry_OtelTraceExporter_Jaeger) Reset() {
	*x = Monitor_OpenTelemetry_OtelTraceExporter_Jaeger{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_monitor_opentelemetry_opentelemetry_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Monitor_OpenTelemetry_OtelTraceExporter_Jaeger) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Monitor_OpenTelemetry_OtelTraceExporter_Jaeger) ProtoMessage() {}

func (x *Monitor_OpenTelemetry_OtelTraceExporter_Jaeger) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_monitor_opentelemetry_opentelemetry_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Monitor_OpenTelemetry_OtelTraceExporter_Jaeger.ProtoReflect.Descriptor instead.
func (*Monitor_OpenTelemetry_OtelTraceExporter_Jaeger) Descriptor() ([]byte, []int) {
	return file_pkg_monitor_opentelemetry_opentelemetry_proto_rawDescGZIP(), []int{0, 0, 2, 0}
}

func (x *Monitor_OpenTelemetry_OtelTraceExporter_Jaeger) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type Monitor_OpenTelemetry_OtelTraceExporter_Stdout struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrettyPrint bool `protobuf:"varint,1,opt,name=pretty_print,json=prettyPrint,proto3" json:"pretty_print,omitempty"`
}

func (x *Monitor_OpenTelemetry_OtelTraceExporter_Stdout) Reset() {
	*x = Monitor_OpenTelemetry_OtelTraceExporter_Stdout{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_monitor_opentelemetry_opentelemetry_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Monitor_OpenTelemetry_OtelTraceExporter_Stdout) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Monitor_OpenTelemetry_OtelTraceExporter_Stdout) ProtoMessage() {}

func (x *Monitor_OpenTelemetry_OtelTraceExporter_Stdout) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_monitor_opentelemetry_opentelemetry_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Monitor_OpenTelemetry_OtelTraceExporter_Stdout.ProtoReflect.Descriptor instead.
func (*Monitor_OpenTelemetry_OtelTraceExporter_Stdout) Descriptor() ([]byte, []int) {
	return file_pkg_monitor_opentelemetry_opentelemetry_proto_rawDescGZIP(), []int{0, 0, 2, 1}
}

func (x *Monitor_OpenTelemetry_OtelTraceExporter_Stdout) GetPrettyPrint() bool {
	if x != nil {
		return x.PrettyPrint
	}
	return false
}

var File_pkg_monitor_opentelemetry_opentelemetry_proto protoreflect.FileDescriptor

var file_pkg_monitor_opentelemetry_opentelemetry_proto_rawDesc = []byte{
	0x0a, 0x2d, 0x70, 0x6b, 0x67, 0x2f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2f, 0x6f, 0x70,
	0x65, 0x6e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2f, 0x6f, 0x70, 0x65, 0x6e,
	0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x1c, 0x67, 0x6f, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x1a, 0x1e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf4, 0x0f,
	0x0a, 0x07, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x12, 0x5a, 0x0a, 0x0e, 0x6f, 0x70, 0x65,
	0x6e, 0x5f, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x33, 0x2e, 0x67, 0x6f, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79,
	0x2e, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x54, 0x65, 0x6c,
	0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x6f, 0x70, 0x65, 0x6e, 0x54, 0x65, 0x6c, 0x65,
	0x6d, 0x65, 0x74, 0x72, 0x79, 0x1a, 0x8c, 0x0f, 0x0a, 0x0d, 0x4f, 0x70, 0x65, 0x6e, 0x54, 0x65,
	0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x12, 0x51, 0x0a, 0x17, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x63, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x15, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x82, 0x01, 0x0a, 0x18, 0x6f, 0x74, 0x65, 0x6c, 0x5f, 0x74, 0x72,
	0x61, 0x63, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x49, 0x2e, 0x67, 0x6f, 0x2e, 0x70, 0x6b, 0x67,
	0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x74, 0x65, 0x6c,
	0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x4f,
	0x70, 0x65, 0x6e, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x4f, 0x74, 0x65,
	0x6c, 0x54, 0x72, 0x61, 0x63, 0x65, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x15, 0x6f, 0x74, 0x65, 0x6c, 0x54, 0x72, 0x61, 0x63, 0x65, 0x45, 0x78, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x85, 0x01, 0x0a, 0x19, 0x6f, 0x74,
	0x65, 0x6c, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74,
	0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4a, 0x2e,
	0x67, 0x6f, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x4d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74,
	0x72, 0x79, 0x2e, 0x4f, 0x74, 0x65, 0x6c, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x45, 0x78, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x16, 0x6f, 0x74, 0x65, 0x6c, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x7c, 0x0a, 0x16, 0x6f, 0x74, 0x65, 0x6c, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x65, 0x78,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x47, 0x2e, 0x67, 0x6f, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79,
	0x2e, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x54, 0x65, 0x6c,
	0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x4f, 0x74, 0x65, 0x6c, 0x4c, 0x6f, 0x67, 0x45, 0x78,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x13, 0x6f, 0x74, 0x65, 0x6c,
	0x4c, 0x6f, 0x67, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x78, 0x0a, 0x14, 0x6f, 0x74, 0x65, 0x6c, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x65,
	0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x46, 0x2e,
	0x67, 0x6f, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x4d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74,
	0x72, 0x79, 0x2e, 0x4f, 0x74, 0x65, 0x6c, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x45, 0x78, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x72, 0x52, 0x12, 0x6f, 0x74, 0x65, 0x6c, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x12, 0x75, 0x0a, 0x13, 0x6f, 0x74, 0x65,
	0x6c, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x67, 0x6f, 0x2e, 0x70, 0x6b, 0x67, 0x2e,
	0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x74, 0x65, 0x6c, 0x65,
	0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x4f, 0x70,
	0x65, 0x6e, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x4f, 0x74, 0x65, 0x6c,
	0x54, 0x72, 0x61, 0x63, 0x65, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x52, 0x11, 0x6f,
	0x74, 0x65, 0x6c, 0x54, 0x72, 0x61, 0x63, 0x65, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72,
	0x12, 0x58, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x67, 0x6f, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x6d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72,
	0x79, 0x2e, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x54, 0x65,
	0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x1a, 0xc6, 0x01, 0x0a, 0x08, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x5d, 0x0a, 0x05, 0x61, 0x74,
	0x74, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x67, 0x6f, 0x2e, 0x70,
	0x6b, 0x67, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x74,
	0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x05, 0x61, 0x74, 0x74, 0x72, 0x73, 0x1a, 0x38, 0x0a, 0x0a, 0x41, 0x74, 0x74,
	0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0xbb, 0x02, 0x0a, 0x12, 0x4f, 0x74, 0x65, 0x6c, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x12, 0x71, 0x0a, 0x0a, 0x70, 0x72,
	0x6f, 0x6d, 0x65, 0x74, 0x68, 0x65, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x51,
	0x2e, 0x67, 0x6f, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x4d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65,
	0x74, 0x72, 0x79, 0x2e, 0x4f, 0x74, 0x65, 0x6c, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x45, 0x78,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x65, 0x75,
	0x73, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x65, 0x75, 0x73, 0x12, 0x65, 0x0a,
	0x06, 0x73, 0x74, 0x64, 0x6f, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4d, 0x2e,
	0x67, 0x6f, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x4d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74,
	0x72, 0x79, 0x2e, 0x4f, 0x74, 0x65, 0x6c, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x45, 0x78, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x64, 0x6f, 0x75, 0x74, 0x52, 0x06, 0x73, 0x74,
	0x64, 0x6f, 0x75, 0x74, 0x1a, 0x1e, 0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x65,
	0x75, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x75, 0x72, 0x6c, 0x1a, 0x2b, 0x0a, 0x06, 0x53, 0x74, 0x64, 0x6f, 0x75, 0x74, 0x12, 0x21,
	0x0a, 0x0c, 0x70, 0x72, 0x65, 0x74, 0x74, 0x79, 0x5f, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x74, 0x74, 0x79, 0x50, 0x72, 0x69, 0x6e,
	0x74, 0x1a, 0xa8, 0x02, 0x0a, 0x11, 0x4f, 0x74, 0x65, 0x6c, 0x54, 0x72, 0x61, 0x63, 0x65, 0x45,
	0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x12, 0x64, 0x0a, 0x06, 0x6a, 0x61, 0x65, 0x67, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4c, 0x2e, 0x67, 0x6f, 0x2e, 0x70, 0x6b, 0x67,
	0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x74, 0x65, 0x6c,
	0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x4f,
	0x70, 0x65, 0x6e, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x4f, 0x74, 0x65,
	0x6c, 0x54, 0x72, 0x61, 0x63, 0x65, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x4a,
	0x61, 0x65, 0x67, 0x65, 0x72, 0x52, 0x06, 0x6a, 0x61, 0x65, 0x67, 0x65, 0x72, 0x12, 0x64, 0x0a,
	0x06, 0x73, 0x74, 0x64, 0x6f, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4c, 0x2e,
	0x67, 0x6f, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x4d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74,
	0x72, 0x79, 0x2e, 0x4f, 0x74, 0x65, 0x6c, 0x54, 0x72, 0x61, 0x63, 0x65, 0x45, 0x78, 0x70, 0x6f,
	0x72, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x64, 0x6f, 0x75, 0x74, 0x52, 0x06, 0x73, 0x74, 0x64,
	0x6f, 0x75, 0x74, 0x1a, 0x1a, 0x0a, 0x06, 0x4a, 0x61, 0x65, 0x67, 0x65, 0x72, 0x12, 0x10, 0x0a,
	0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x1a,
	0x2b, 0x0a, 0x06, 0x53, 0x74, 0x64, 0x6f, 0x75, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x65,
	0x74, 0x74, 0x79, 0x5f, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0b, 0x70, 0x72, 0x65, 0x74, 0x74, 0x79, 0x50, 0x72, 0x69, 0x6e, 0x74, 0x22, 0x6d, 0x0a, 0x15,
	0x4f, 0x74, 0x65, 0x6c, 0x54, 0x72, 0x61, 0x63, 0x65, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x6e,
	0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x73,
	0x74, 0x64, 0x6f, 0x75, 0x74, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x63, 0x65,
	0x5f, 0x6f, 0x74, 0x6c, 0x70, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x63, 0x65,
	0x5f, 0x6a, 0x61, 0x65, 0x67, 0x65, 0x72, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x74, 0x72, 0x61,
	0x63, 0x65, 0x5f, 0x7a, 0x69, 0x70, 0x6b, 0x69, 0x6e, 0x10, 0x04, 0x22, 0x64, 0x0a, 0x16, 0x4f,
	0x74, 0x65, 0x6c, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f,
	0x6e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x5f, 0x73, 0x74, 0x64, 0x6f, 0x75, 0x74, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x5f, 0x6f, 0x74, 0x6c, 0x70, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x5f, 0x70, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x65, 0x75, 0x73, 0x10,
	0x03, 0x22, 0x31, 0x0a, 0x13, 0x4f, 0x74, 0x65, 0x6c, 0x4c, 0x6f, 0x67, 0x45, 0x78, 0x70, 0x6f,
	0x72, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x5f,
	0x6e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x5f, 0x6f, 0x74,
	0x6c, 0x70, 0x10, 0x01, 0x42, 0x42, 0x5a, 0x40, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x6b, 0x61, 0x79, 0x64, 0x78, 0x68, 0x2f, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67,
	0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2f, 0x6f, 0x70, 0x65,
	0x6e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x3b, 0x6f, 0x70, 0x65, 0x6e, 0x74,
	0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pkg_monitor_opentelemetry_opentelemetry_proto_rawDescOnce sync.Once
	file_pkg_monitor_opentelemetry_opentelemetry_proto_rawDescData = file_pkg_monitor_opentelemetry_opentelemetry_proto_rawDesc
)

func file_pkg_monitor_opentelemetry_opentelemetry_proto_rawDescGZIP() []byte {
	file_pkg_monitor_opentelemetry_opentelemetry_proto_rawDescOnce.Do(func() {
		file_pkg_monitor_opentelemetry_opentelemetry_proto_rawDescData = protoimpl.X.CompressGZIP(file_pkg_monitor_opentelemetry_opentelemetry_proto_rawDescData)
	})
	return file_pkg_monitor_opentelemetry_opentelemetry_proto_rawDescData
}

var file_pkg_monitor_opentelemetry_opentelemetry_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_pkg_monitor_opentelemetry_opentelemetry_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_pkg_monitor_opentelemetry_opentelemetry_proto_goTypes = []interface{}{
	(Monitor_OpenTelemetry_OtelTraceExporterType)(0),  // 0: go.pkg.monitor.opentelemetry.Monitor.OpenTelemetry.OtelTraceExporterType
	(Monitor_OpenTelemetry_OtelMetricExporterType)(0), // 1: go.pkg.monitor.opentelemetry.Monitor.OpenTelemetry.OtelMetricExporterType
	(Monitor_OpenTelemetry_OtelLogExporterType)(0),    // 2: go.pkg.monitor.opentelemetry.Monitor.OpenTelemetry.OtelLogExporterType
	(*Monitor)(nil),                                  // 3: go.pkg.monitor.opentelemetry.Monitor
	(*Monitor_OpenTelemetry)(nil),                    // 4: go.pkg.monitor.opentelemetry.Monitor.OpenTelemetry
	(*Monitor_OpenTelemetry_Resource)(nil),           // 5: go.pkg.monitor.opentelemetry.Monitor.OpenTelemetry.Resource
	(*Monitor_OpenTelemetry_OtelMetricExporter)(nil), // 6: go.pkg.monitor.opentelemetry.Monitor.OpenTelemetry.OtelMetricExporter
	(*Monitor_OpenTelemetry_OtelTraceExporter)(nil),  // 7: go.pkg.monitor.opentelemetry.Monitor.OpenTelemetry.OtelTraceExporter
	nil, // 8: go.pkg.monitor.opentelemetry.Monitor.OpenTelemetry.Resource.AttrsEntry
	(*Monitor_OpenTelemetry_OtelMetricExporter_Prometheus)(nil), // 9: go.pkg.monitor.opentelemetry.Monitor.OpenTelemetry.OtelMetricExporter.Prometheus
	(*Monitor_OpenTelemetry_OtelMetricExporter_Stdout)(nil),     // 10: go.pkg.monitor.opentelemetry.Monitor.OpenTelemetry.OtelMetricExporter.Stdout
	(*Monitor_OpenTelemetry_OtelTraceExporter_Jaeger)(nil),      // 11: go.pkg.monitor.opentelemetry.Monitor.OpenTelemetry.OtelTraceExporter.Jaeger
	(*Monitor_OpenTelemetry_OtelTraceExporter_Stdout)(nil),      // 12: go.pkg.monitor.opentelemetry.Monitor.OpenTelemetry.OtelTraceExporter.Stdout
	(*duration.Duration)(nil),                                   // 13: google.protobuf.Duration
}
var file_pkg_monitor_opentelemetry_opentelemetry_proto_depIdxs = []int32{
	4,  // 0: go.pkg.monitor.opentelemetry.Monitor.open_telemetry:type_name -> go.pkg.monitor.opentelemetry.Monitor.OpenTelemetry
	13, // 1: go.pkg.monitor.opentelemetry.Monitor.OpenTelemetry.metric_collect_duration:type_name -> google.protobuf.Duration
	0,  // 2: go.pkg.monitor.opentelemetry.Monitor.OpenTelemetry.otel_trace_exporter_type:type_name -> go.pkg.monitor.opentelemetry.Monitor.OpenTelemetry.OtelTraceExporterType
	1,  // 3: go.pkg.monitor.opentelemetry.Monitor.OpenTelemetry.otel_metric_exporter_type:type_name -> go.pkg.monitor.opentelemetry.Monitor.OpenTelemetry.OtelMetricExporterType
	2,  // 4: go.pkg.monitor.opentelemetry.Monitor.OpenTelemetry.otel_log_exporter_type:type_name -> go.pkg.monitor.opentelemetry.Monitor.OpenTelemetry.OtelLogExporterType
	6,  // 5: go.pkg.monitor.opentelemetry.Monitor.OpenTelemetry.otel_metric_exporter:type_name -> go.pkg.monitor.opentelemetry.Monitor.OpenTelemetry.OtelMetricExporter
	7,  // 6: go.pkg.monitor.opentelemetry.Monitor.OpenTelemetry.otel_trace_exporter:type_name -> go.pkg.monitor.opentelemetry.Monitor.OpenTelemetry.OtelTraceExporter
	5,  // 7: go.pkg.monitor.opentelemetry.Monitor.OpenTelemetry.resource:type_name -> go.pkg.monitor.opentelemetry.Monitor.OpenTelemetry.Resource
	8,  // 8: go.pkg.monitor.opentelemetry.Monitor.OpenTelemetry.Resource.attrs:type_name -> go.pkg.monitor.opentelemetry.Monitor.OpenTelemetry.Resource.AttrsEntry
	9,  // 9: go.pkg.monitor.opentelemetry.Monitor.OpenTelemetry.OtelMetricExporter.prometheus:type_name -> go.pkg.monitor.opentelemetry.Monitor.OpenTelemetry.OtelMetricExporter.Prometheus
	10, // 10: go.pkg.monitor.opentelemetry.Monitor.OpenTelemetry.OtelMetricExporter.stdout:type_name -> go.pkg.monitor.opentelemetry.Monitor.OpenTelemetry.OtelMetricExporter.Stdout
	11, // 11: go.pkg.monitor.opentelemetry.Monitor.OpenTelemetry.OtelTraceExporter.jaeger:type_name -> go.pkg.monitor.opentelemetry.Monitor.OpenTelemetry.OtelTraceExporter.Jaeger
	12, // 12: go.pkg.monitor.opentelemetry.Monitor.OpenTelemetry.OtelTraceExporter.stdout:type_name -> go.pkg.monitor.opentelemetry.Monitor.OpenTelemetry.OtelTraceExporter.Stdout
	13, // [13:13] is the sub-list for method output_type
	13, // [13:13] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_pkg_monitor_opentelemetry_opentelemetry_proto_init() }
func file_pkg_monitor_opentelemetry_opentelemetry_proto_init() {
	if File_pkg_monitor_opentelemetry_opentelemetry_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pkg_monitor_opentelemetry_opentelemetry_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Monitor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_monitor_opentelemetry_opentelemetry_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Monitor_OpenTelemetry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_monitor_opentelemetry_opentelemetry_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Monitor_OpenTelemetry_Resource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_monitor_opentelemetry_opentelemetry_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Monitor_OpenTelemetry_OtelMetricExporter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_monitor_opentelemetry_opentelemetry_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Monitor_OpenTelemetry_OtelTraceExporter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_monitor_opentelemetry_opentelemetry_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Monitor_OpenTelemetry_OtelMetricExporter_Prometheus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_monitor_opentelemetry_opentelemetry_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Monitor_OpenTelemetry_OtelMetricExporter_Stdout); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_monitor_opentelemetry_opentelemetry_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Monitor_OpenTelemetry_OtelTraceExporter_Jaeger); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_monitor_opentelemetry_opentelemetry_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Monitor_OpenTelemetry_OtelTraceExporter_Stdout); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pkg_monitor_opentelemetry_opentelemetry_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_pkg_monitor_opentelemetry_opentelemetry_proto_goTypes,
		DependencyIndexes: file_pkg_monitor_opentelemetry_opentelemetry_proto_depIdxs,
		EnumInfos:         file_pkg_monitor_opentelemetry_opentelemetry_proto_enumTypes,
		MessageInfos:      file_pkg_monitor_opentelemetry_opentelemetry_proto_msgTypes,
	}.Build()
	File_pkg_monitor_opentelemetry_opentelemetry_proto = out.File
	file_pkg_monitor_opentelemetry_opentelemetry_proto_rawDesc = nil
	file_pkg_monitor_opentelemetry_opentelemetry_proto_goTypes = nil
	file_pkg_monitor_opentelemetry_opentelemetry_proto_depIdxs = nil
}
