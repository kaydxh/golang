// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.17.3
// source: gocv/gocv.magick.proto

package gocv

import (
	code "github.com/kaydxh/golang/pkg/gocv/cgo/api/openapi-spec/types/code"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type OrientationType int32

const (
	OrientationType_UndefinedOrientation   OrientationType = 0
	OrientationType_TopLeftOrientation     OrientationType = 1
	OrientationType_TopRightOrientation    OrientationType = 2
	OrientationType_BottomRightOrientation OrientationType = 3
	OrientationType_BottomLeftOrientation  OrientationType = 4
	OrientationType_LeftTopOrientation     OrientationType = 5
	OrientationType_RightTopOrientation    OrientationType = 6
	OrientationType_RightBottomOrientation OrientationType = 7
	OrientationType_LeftBottomOrientation  OrientationType = 8
)

// Enum value maps for OrientationType.
var (
	OrientationType_name = map[int32]string{
		0: "UndefinedOrientation",
		1: "TopLeftOrientation",
		2: "TopRightOrientation",
		3: "BottomRightOrientation",
		4: "BottomLeftOrientation",
		5: "LeftTopOrientation",
		6: "RightTopOrientation",
		7: "RightBottomOrientation",
		8: "LeftBottomOrientation",
	}
	OrientationType_value = map[string]int32{
		"UndefinedOrientation":   0,
		"TopLeftOrientation":     1,
		"TopRightOrientation":    2,
		"BottomRightOrientation": 3,
		"BottomLeftOrientation":  4,
		"LeftTopOrientation":     5,
		"RightTopOrientation":    6,
		"RightBottomOrientation": 7,
		"LeftBottomOrientation":  8,
	}
)

func (x OrientationType) Enum() *OrientationType {
	p := new(OrientationType)
	*p = x
	return p
}

func (x OrientationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrientationType) Descriptor() protoreflect.EnumDescriptor {
	return file_gocv_gocv_magick_proto_enumTypes[0].Descriptor()
}

func (OrientationType) Type() protoreflect.EnumType {
	return &file_gocv_gocv_magick_proto_enumTypes[0]
}

func (x OrientationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OrientationType.Descriptor instead.
func (OrientationType) EnumDescriptor() ([]byte, []int) {
	return file_gocv_gocv_magick_proto_rawDescGZIP(), []int{0}
}

// graphics-magick/include/magick/colorspace.h
type ColorspaceType int32

const (
	ColorspaceType_UndefinedColorspace    ColorspaceType = 0
	ColorspaceType_RGBColorspace          ColorspaceType = 1 // Plain old RGB colorspace
	ColorspaceType_GRAYColorspace         ColorspaceType = 2 // Plain old full-range grayscale
	ColorspaceType_TransparentColorspace  ColorspaceType = 3 // RGB but preserve matte channel during quantize
	ColorspaceType_OHTAColorspace         ColorspaceType = 4
	ColorspaceType_XYZColorspace          ColorspaceType = 5 // CIE XYZ
	ColorspaceType_YCCColorspace          ColorspaceType = 6 // Kodak PhotoCD PhotoYCC
	ColorspaceType_YIQColorspace          ColorspaceType = 7
	ColorspaceType_YPbPrColorspace        ColorspaceType = 8
	ColorspaceType_YUVColorspace          ColorspaceType = 9
	ColorspaceType_CMYKColorspace         ColorspaceType = 10 // Cyan, magenta, yellow, black, alpha
	ColorspaceType_sRGBColorspace         ColorspaceType = 11 // Kodak PhotoCD sRGB
	ColorspaceType_HSLColorspace          ColorspaceType = 12 // Hue, saturation, luminosity
	ColorspaceType_HWBColorspace          ColorspaceType = 13 // Hue, whiteness, blackness
	ColorspaceType_LABColorspace          ColorspaceType = 14 // LAB colorspace not supported yet other than via lcms
	ColorspaceType_CineonLogRGBColorspace ColorspaceType = 15 // RGB data with Cineon Log scaling, 2.048 density range
	ColorspaceType_Rec601LumaColorspace   ColorspaceType = 16 // Luma (Y) according to ITU-R 601
	ColorspaceType_Rec601YCbCrColorspace  ColorspaceType = 17 // YCbCr according to ITU-R 601
	ColorspaceType_Rec709LumaColorspace   ColorspaceType = 18 // Luma (Y) according to ITU-R 709
	ColorspaceType_Rec709YCbCrColorspace  ColorspaceType = 19 // YCbCr according to ITU-R 709
)

// Enum value maps for ColorspaceType.
var (
	ColorspaceType_name = map[int32]string{
		0:  "UndefinedColorspace",
		1:  "RGBColorspace",
		2:  "GRAYColorspace",
		3:  "TransparentColorspace",
		4:  "OHTAColorspace",
		5:  "XYZColorspace",
		6:  "YCCColorspace",
		7:  "YIQColorspace",
		8:  "YPbPrColorspace",
		9:  "YUVColorspace",
		10: "CMYKColorspace",
		11: "sRGBColorspace",
		12: "HSLColorspace",
		13: "HWBColorspace",
		14: "LABColorspace",
		15: "CineonLogRGBColorspace",
		16: "Rec601LumaColorspace",
		17: "Rec601YCbCrColorspace",
		18: "Rec709LumaColorspace",
		19: "Rec709YCbCrColorspace",
	}
	ColorspaceType_value = map[string]int32{
		"UndefinedColorspace":    0,
		"RGBColorspace":          1,
		"GRAYColorspace":         2,
		"TransparentColorspace":  3,
		"OHTAColorspace":         4,
		"XYZColorspace":          5,
		"YCCColorspace":          6,
		"YIQColorspace":          7,
		"YPbPrColorspace":        8,
		"YUVColorspace":          9,
		"CMYKColorspace":         10,
		"sRGBColorspace":         11,
		"HSLColorspace":          12,
		"HWBColorspace":          13,
		"LABColorspace":          14,
		"CineonLogRGBColorspace": 15,
		"Rec601LumaColorspace":   16,
		"Rec601YCbCrColorspace":  17,
		"Rec709LumaColorspace":   18,
		"Rec709YCbCrColorspace":  19,
	}
)

func (x ColorspaceType) Enum() *ColorspaceType {
	p := new(ColorspaceType)
	*p = x
	return p
}

func (x ColorspaceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ColorspaceType) Descriptor() protoreflect.EnumDescriptor {
	return file_gocv_gocv_magick_proto_enumTypes[1].Descriptor()
}

func (ColorspaceType) Type() protoreflect.EnumType {
	return &file_gocv_gocv_magick_proto_enumTypes[1]
}

func (x ColorspaceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ColorspaceType.Descriptor instead.
func (ColorspaceType) EnumDescriptor() ([]byte, []int) {
	return file_gocv_gocv_magick_proto_rawDescGZIP(), []int{1}
}

type MagickInitializeMagickRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *MagickInitializeMagickRequest) Reset() {
	*x = MagickInitializeMagickRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gocv_gocv_magick_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MagickInitializeMagickRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MagickInitializeMagickRequest) ProtoMessage() {}

func (x *MagickInitializeMagickRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gocv_gocv_magick_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MagickInitializeMagickRequest.ProtoReflect.Descriptor instead.
func (*MagickInitializeMagickRequest) Descriptor() ([]byte, []int) {
	return file_gocv_gocv_magick_proto_rawDescGZIP(), []int{0}
}

func (x *MagickInitializeMagickRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type MagickInitializeMagickResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error *code.CgoError `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *MagickInitializeMagickResponse) Reset() {
	*x = MagickInitializeMagickResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gocv_gocv_magick_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MagickInitializeMagickResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MagickInitializeMagickResponse) ProtoMessage() {}

func (x *MagickInitializeMagickResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gocv_gocv_magick_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MagickInitializeMagickResponse.ProtoReflect.Descriptor instead.
func (*MagickInitializeMagickResponse) Descriptor() ([]byte, []int) {
	return file_gocv_gocv_magick_proto_rawDescGZIP(), []int{1}
}

func (x *MagickInitializeMagickResponse) GetError() *code.CgoError {
	if x != nil {
		return x.Error
	}
	return nil
}

type MagickImageDecodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Image            []byte `protobuf:"bytes,1,opt,name=image,proto3" json:"image,omitempty"`
	TargetColorSpace string `protobuf:"bytes,2,opt,name=target_color_space,json=targetColorSpace,proto3" json:"target_color_space,omitempty"` // support BGR BGRA GRA GRAYA, default BGRA
}

func (x *MagickImageDecodeRequest) Reset() {
	*x = MagickImageDecodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gocv_gocv_magick_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MagickImageDecodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MagickImageDecodeRequest) ProtoMessage() {}

func (x *MagickImageDecodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gocv_gocv_magick_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MagickImageDecodeRequest.ProtoReflect.Descriptor instead.
func (*MagickImageDecodeRequest) Descriptor() ([]byte, []int) {
	return file_gocv_gocv_magick_proto_rawDescGZIP(), []int{2}
}

func (x *MagickImageDecodeRequest) GetImage() []byte {
	if x != nil {
		return x.Image
	}
	return nil
}

func (x *MagickImageDecodeRequest) GetTargetColorSpace() string {
	if x != nil {
		return x.TargetColorSpace
	}
	return ""
}

type MagickImageDecodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error           *code.CgoError  `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	CvMatPointer    int64           `protobuf:"varint,2,opt,name=cv_mat_pointer,json=cvMatPointer,proto3" json:"cv_mat_pointer,omitempty"` // pointer of cv::Mat
	Rows            int64           `protobuf:"varint,3,opt,name=rows,proto3" json:"rows,omitempty"`                                       //  Image height
	Columns         int64           `protobuf:"varint,4,opt,name=columns,proto3" json:"columns,omitempty"`                                 //  Image width
	Magick          string          `protobuf:"bytes,5,opt,name=magick,proto3" json:"magick,omitempty"`                                    // File type magick identifier (.e.g "GIF")
	OrientationType OrientationType `protobuf:"varint,6,opt,name=orientation_type,json=orientationType,proto3,enum=sdk.api.gocv.OrientationType" json:"orientation_type,omitempty"`
	ColorspaceType  ColorspaceType  `protobuf:"varint,7,opt,name=colorspace_type,json=colorspaceType,proto3,enum=sdk.api.gocv.ColorspaceType" json:"colorspace_type,omitempty"`
}

func (x *MagickImageDecodeResponse) Reset() {
	*x = MagickImageDecodeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gocv_gocv_magick_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MagickImageDecodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MagickImageDecodeResponse) ProtoMessage() {}

func (x *MagickImageDecodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gocv_gocv_magick_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MagickImageDecodeResponse.ProtoReflect.Descriptor instead.
func (*MagickImageDecodeResponse) Descriptor() ([]byte, []int) {
	return file_gocv_gocv_magick_proto_rawDescGZIP(), []int{3}
}

func (x *MagickImageDecodeResponse) GetError() *code.CgoError {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *MagickImageDecodeResponse) GetCvMatPointer() int64 {
	if x != nil {
		return x.CvMatPointer
	}
	return 0
}

func (x *MagickImageDecodeResponse) GetRows() int64 {
	if x != nil {
		return x.Rows
	}
	return 0
}

func (x *MagickImageDecodeResponse) GetColumns() int64 {
	if x != nil {
		return x.Columns
	}
	return 0
}

func (x *MagickImageDecodeResponse) GetMagick() string {
	if x != nil {
		return x.Magick
	}
	return ""
}

func (x *MagickImageDecodeResponse) GetOrientationType() OrientationType {
	if x != nil {
		return x.OrientationType
	}
	return OrientationType_UndefinedOrientation
}

func (x *MagickImageDecodeResponse) GetColorspaceType() ColorspaceType {
	if x != nil {
		return x.ColorspaceType
	}
	return ColorspaceType_UndefinedColorspace
}

var File_gocv_gocv_magick_proto protoreflect.FileDescriptor

var file_gocv_gocv_magick_proto_rawDesc = []byte{
	0x0a, 0x16, 0x67, 0x6f, 0x63, 0x76, 0x2f, 0x67, 0x6f, 0x63, 0x76, 0x2e, 0x6d, 0x61, 0x67, 0x69,
	0x63, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x73, 0x64, 0x6b, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x67, 0x6f, 0x63, 0x76, 0x1a, 0x2d, 0x61, 0x70, 0x69, 0x2f, 0x6f, 0x70, 0x65, 0x6e,
	0x61, 0x70, 0x69, 0x2d, 0x73, 0x70, 0x65, 0x63, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x63,
	0x6f, 0x64, 0x65, 0x2f, 0x73, 0x64, 0x6b, 0x2d, 0x67, 0x6f, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x33, 0x0a, 0x1d, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x6b, 0x49,
	0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x6b, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x22, 0x50, 0x0a, 0x1e, 0x4d, 0x61,
	0x67, 0x69, 0x63, 0x6b, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x4d, 0x61,
	0x67, 0x69, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x64,
	0x6b, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x67, 0x6f,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x5e, 0x0a, 0x18,
	0x4d, 0x61, 0x67, 0x69, 0x63, 0x6b, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x65, 0x63, 0x6f, 0x64,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x2c,
	0x0a, 0x12, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x53, 0x70, 0x61, 0x63, 0x65, 0x22, 0xc8, 0x02, 0x0a,
	0x19, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x6b, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x65, 0x63, 0x6f,
	0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x64, 0x6b, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x67, 0x6f, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x76,
	0x5f, 0x6d, 0x61, 0x74, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0c, 0x63, 0x76, 0x4d, 0x61, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04,
	0x72, 0x6f, 0x77, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x6d, 0x61, 0x67, 0x69, 0x63, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x6d, 0x61, 0x67, 0x69, 0x63, 0x6b, 0x12, 0x48, 0x0a, 0x10, 0x6f, 0x72, 0x69, 0x65, 0x6e, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1d, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x6f, 0x63, 0x76, 0x2e,
	0x4f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0f, 0x6f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x45, 0x0a, 0x0f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x73, 0x64, 0x6b, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x67, 0x6f, 0x63, 0x76, 0x2e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x2a, 0xfb, 0x01, 0x0a, 0x0f, 0x4f, 0x72, 0x69, 0x65,
	0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x55,
	0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x4f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x6f, 0x70, 0x4c, 0x65, 0x66, 0x74,
	0x4f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x01, 0x12, 0x17, 0x0a,
	0x13, 0x54, 0x6f, 0x70, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x42, 0x6f, 0x74, 0x74, 0x6f, 0x6d,
	0x52, 0x69, 0x67, 0x68, 0x74, 0x4f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x10, 0x03, 0x12, 0x19, 0x0a, 0x15, 0x42, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x4c, 0x65, 0x66, 0x74,
	0x4f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x04, 0x12, 0x16, 0x0a,
	0x12, 0x4c, 0x65, 0x66, 0x74, 0x54, 0x6f, 0x70, 0x4f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x10, 0x05, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x69, 0x67, 0x68, 0x74, 0x54, 0x6f,
	0x70, 0x4f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x06, 0x12, 0x1a,
	0x0a, 0x16, 0x52, 0x69, 0x67, 0x68, 0x74, 0x42, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x4f, 0x72, 0x69,
	0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x07, 0x12, 0x19, 0x0a, 0x15, 0x4c, 0x65,
	0x66, 0x74, 0x42, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x4f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x10, 0x08, 0x2a, 0xc7, 0x03, 0x0a, 0x0e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x55, 0x6e, 0x64, 0x65,
	0x66, 0x69, 0x6e, 0x65, 0x64, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x70, 0x61, 0x63, 0x65, 0x10,
	0x00, 0x12, 0x11, 0x0a, 0x0d, 0x52, 0x47, 0x42, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x47, 0x52, 0x41, 0x59, 0x43, 0x6f, 0x6c, 0x6f,
	0x72, 0x73, 0x70, 0x61, 0x63, 0x65, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x4f, 0x48, 0x54, 0x41, 0x43, 0x6f, 0x6c, 0x6f, 0x72,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d, 0x58, 0x59, 0x5a, 0x43, 0x6f,
	0x6c, 0x6f, 0x72, 0x73, 0x70, 0x61, 0x63, 0x65, 0x10, 0x05, 0x12, 0x11, 0x0a, 0x0d, 0x59, 0x43,
	0x43, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x70, 0x61, 0x63, 0x65, 0x10, 0x06, 0x12, 0x11, 0x0a,
	0x0d, 0x59, 0x49, 0x51, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x70, 0x61, 0x63, 0x65, 0x10, 0x07,
	0x12, 0x13, 0x0a, 0x0f, 0x59, 0x50, 0x62, 0x50, 0x72, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x10, 0x08, 0x12, 0x11, 0x0a, 0x0d, 0x59, 0x55, 0x56, 0x43, 0x6f, 0x6c, 0x6f,
	0x72, 0x73, 0x70, 0x61, 0x63, 0x65, 0x10, 0x09, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x4d, 0x59, 0x4b,
	0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x70, 0x61, 0x63, 0x65, 0x10, 0x0a, 0x12, 0x12, 0x0a, 0x0e,
	0x73, 0x52, 0x47, 0x42, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x70, 0x61, 0x63, 0x65, 0x10, 0x0b,
	0x12, 0x11, 0x0a, 0x0d, 0x48, 0x53, 0x4c, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x10, 0x0c, 0x12, 0x11, 0x0a, 0x0d, 0x48, 0x57, 0x42, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x10, 0x0d, 0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x41, 0x42, 0x43, 0x6f, 0x6c,
	0x6f, 0x72, 0x73, 0x70, 0x61, 0x63, 0x65, 0x10, 0x0e, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x69, 0x6e,
	0x65, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x52, 0x47, 0x42, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x10, 0x0f, 0x12, 0x18, 0x0a, 0x14, 0x52, 0x65, 0x63, 0x36, 0x30, 0x31, 0x4c,
	0x75, 0x6d, 0x61, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x70, 0x61, 0x63, 0x65, 0x10, 0x10, 0x12,
	0x19, 0x0a, 0x15, 0x52, 0x65, 0x63, 0x36, 0x30, 0x31, 0x59, 0x43, 0x62, 0x43, 0x72, 0x43, 0x6f,
	0x6c, 0x6f, 0x72, 0x73, 0x70, 0x61, 0x63, 0x65, 0x10, 0x11, 0x12, 0x18, 0x0a, 0x14, 0x52, 0x65,
	0x63, 0x37, 0x30, 0x39, 0x4c, 0x75, 0x6d, 0x61, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x10, 0x12, 0x12, 0x19, 0x0a, 0x15, 0x52, 0x65, 0x63, 0x37, 0x30, 0x39, 0x59, 0x43,
	0x62, 0x43, 0x72, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x70, 0x61, 0x63, 0x65, 0x10, 0x13, 0x42,
	0x42, 0x5a, 0x40, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6b, 0x61,
	0x79, 0x64, 0x78, 0x68, 0x2f, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x70, 0x6b, 0x67, 0x2f,
	0x67, 0x6f, 0x63, 0x76, 0x2f, 0x63, 0x67, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6f, 0x70, 0x65,
	0x6e, 0x61, 0x70, 0x69, 0x2d, 0x73, 0x70, 0x65, 0x63, 0x2f, 0x67, 0x6f, 0x63, 0x76, 0x3b, 0x67,
	0x6f, 0x63, 0x76, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_gocv_gocv_magick_proto_rawDescOnce sync.Once
	file_gocv_gocv_magick_proto_rawDescData = file_gocv_gocv_magick_proto_rawDesc
)

func file_gocv_gocv_magick_proto_rawDescGZIP() []byte {
	file_gocv_gocv_magick_proto_rawDescOnce.Do(func() {
		file_gocv_gocv_magick_proto_rawDescData = protoimpl.X.CompressGZIP(file_gocv_gocv_magick_proto_rawDescData)
	})
	return file_gocv_gocv_magick_proto_rawDescData
}

var file_gocv_gocv_magick_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_gocv_gocv_magick_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_gocv_gocv_magick_proto_goTypes = []interface{}{
	(OrientationType)(0),                   // 0: sdk.api.gocv.OrientationType
	(ColorspaceType)(0),                    // 1: sdk.api.gocv.ColorspaceType
	(*MagickInitializeMagickRequest)(nil),  // 2: sdk.api.gocv.MagickInitializeMagickRequest
	(*MagickInitializeMagickResponse)(nil), // 3: sdk.api.gocv.MagickInitializeMagickResponse
	(*MagickImageDecodeRequest)(nil),       // 4: sdk.api.gocv.MagickImageDecodeRequest
	(*MagickImageDecodeResponse)(nil),      // 5: sdk.api.gocv.MagickImageDecodeResponse
	(*code.CgoError)(nil),                  // 6: sdk.types.code.CgoError
}
var file_gocv_gocv_magick_proto_depIdxs = []int32{
	6, // 0: sdk.api.gocv.MagickInitializeMagickResponse.error:type_name -> sdk.types.code.CgoError
	6, // 1: sdk.api.gocv.MagickImageDecodeResponse.error:type_name -> sdk.types.code.CgoError
	0, // 2: sdk.api.gocv.MagickImageDecodeResponse.orientation_type:type_name -> sdk.api.gocv.OrientationType
	1, // 3: sdk.api.gocv.MagickImageDecodeResponse.colorspace_type:type_name -> sdk.api.gocv.ColorspaceType
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_gocv_gocv_magick_proto_init() }
func file_gocv_gocv_magick_proto_init() {
	if File_gocv_gocv_magick_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_gocv_gocv_magick_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MagickInitializeMagickRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gocv_gocv_magick_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MagickInitializeMagickResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gocv_gocv_magick_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MagickImageDecodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gocv_gocv_magick_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MagickImageDecodeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_gocv_gocv_magick_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_gocv_gocv_magick_proto_goTypes,
		DependencyIndexes: file_gocv_gocv_magick_proto_depIdxs,
		EnumInfos:         file_gocv_gocv_magick_proto_enumTypes,
		MessageInfos:      file_gocv_gocv_magick_proto_msgTypes,
	}.Build()
	File_gocv_gocv_magick_proto = out.File
	file_gocv_gocv_magick_proto_rawDesc = nil
	file_gocv_gocv_magick_proto_goTypes = nil
	file_gocv_gocv_magick_proto_depIdxs = nil
}
