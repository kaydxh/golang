cmake_minimum_required(VERSION 2.8)

macro(log_debug msg)
    get_filename_component(name ${CMAKE_CURRENT_LIST_FILE} NAME)
    string(TIMESTAMP TIME_NOW "%Y-%m-%d %H:%M:%S")
    message("${TIME_NOW} - ${name}:${CMAKE_CURRENT_LIST_LINE} - ${msg}")
endmacro(log_debug)

macro(log_warn msg)
    get_filename_component(name ${CMAKE_CURRENT_LIST_FILE} NAME)
    string(TIMESTAMP TIME_NOW "%Y-%m-%d %H:%M:%S")
    message(WARNING "${TIME_NOW} - ${name}:${CMAKE_CURRENT_LIST_LINE} - ${msg}")
endmacro(log_warn)

macro(log_error msg)
    get_filename_component(name ${CMAKE_CURRENT_LIST_FILE} NAME)
    string(TIMESTAMP TIME_NOW "%Y-%m-%d %H:%M:%S")
    message(SEND_ERROR  "${TIME_NOW} - ${name}:${CMAKE_CURRENT_LIST_LINE} - ${msg}")
endmacro(log_error)

macro(debug_vars)
    FOREACH(A ${ARGN})
      log_debug("${A}:${${A}}")
    ENDFOREACH(A)
endmacro(debug_vars)

macro(log_execute_process)
    set(options "" )
    set(oneValueArgs WORKING_DIRECTORY )
    set(multiValueArgs COMMAND)
    cmake_parse_arguments(log_execute_process "${options}" "${oneValueArgs}" "${multiValueArgs}" ${ARGN})
    string(REPLACE ";" " " CMD "${log_execute_process_COMMAND}")

    if(NOT log_execute_process_WORKING_DIRECTORY)
         log_error("bad cmd:cd ${log_execute_process_WORKING_DIRECTORY} && ${CMD}")
    endif()

    if(NOT EXISTS ${log_execute_process_WORKING_DIRECTORY})
         log_error("bad cmd:cd ${log_execute_process_WORKING_DIRECTORY} && ${CMD}")
    endif()

    log_debug("cd ${log_execute_process_WORKING_DIRECTORY} && ${CMD}")
    execute_process(COMMAND ${log_execute_process_COMMAND}
                    WORKING_DIRECTORY ${log_execute_process_WORKING_DIRECTORY}
                    RESULT_VARIABLE rv ERROR_VARIABLE er
                    OUTPUT_FILE ${log_execute_process_WORKING_DIRECTORY}/out.log
                    ERROR_FILE ${log_execute_process_WORKING_DIRECTORY}/error.log)
    if(rv)
       log_debug("RESULT:${rv}, ERROR:${er}")
    endif()
endmacro(log_execute_process)

macro(add_files_to_qtcreator DIR)
    get_filename_component(dir_name ${DIR} NAME)
    string(REGEX REPLACE "/" "_" source_target ${DIR})
    set(source_target "${dir_name}_${source_target}")

    log_debug("add_files_to_qtcreator: ${source_target}")
    set(files_sources "")
    foreach(fileprex ${ARGN})
       file(GLOB_RECURSE _src_files RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} ${DIR}/*${fileprex})
       foreach(src_file ${_src_files})
           if(NOT (src_file MATCHES ".*\\.git.*"))
                list(APPEND files_sources ${src_file})
           endif()
       endforeach()
     endforeach()

     add_custom_target(${source_target}
         SOURCES ${files_sources}
         WORKING_DIRECTORY ${DIR})

endmacro(add_files_to_qtcreator)

macro(add_shared_library DIR)
    set_property(GLOBAL APPEND PROPERTY GLOBAL_INCLUDE_DIRS "${DIR}/include")
    SET(LIB_DIR ${DIR}/lib)
    if(NOT EXISTS ${LIB_DIR})
        SET(LIB_DIR ${DIR}/lib64)
    endif()
    set_property(GLOBAL APPEND PROPERTY GLOBAL_LINK_DIRS ${LIB_DIR})
    INCLUDE_DIRECTORIES(${DIR}/include)
    add_files_to_qtcreator(${DIR}/include .h .hpp)

    foreach(libname ${ARGN})
            add_library(${libname} SHARED IMPORTED)
            set_property(TARGET ${libname} PROPERTY IMPORTED_LOCATION ${DIR}/lib/lib${libname}.so)
            set(SHARED_SO_PATH  ${SHARED_SO_PATH}:${DIR}/lib)
    endforeach()
    log_debug("add_shared_library: ${ARGN} in: ${DIR}")
endmacro(add_shared_library)

macro(add_static_library DIR)
    set_property(GLOBAL APPEND PROPERTY GLOBAL_INCLUDE_DIRS "${DIR}/include")
    SET(LIB_DIR ${DIR}/lib)
    if(NOT EXISTS ${LIB_DIR})
        SET(LIB_DIR ${DIR}/lib64)
    endif()
    set_property(GLOBAL APPEND PROPERTY GLOBAL_LINK_DIRS ${LIB_DIR})
    INCLUDE_DIRECTORIES(${DIR}/include)
    add_files_to_qtcreator(${DIR}/include .h .hpp)
    foreach(libname ${ARGN})
      add_library(${libname} STATIC IMPORTED)
      set_property(TARGET ${libname} PROPERTY IMPORTED_LOCATION ${DIR}/lib/lib${libname}.a)
    endforeach()
    log_debug("add_static_library: ${ARGN} in: ${DIR}")
endmacro(add_static_library)

MACRO(SUBDIRLIST result curdir)
    FILE(GLOB children RELATIVE ${curdir} ${curdir}/[a-zA-Z0-9]*)
  SET(dirlist "")
  FOREACH(child ${children})
    IF(IS_DIRECTORY ${curdir}/${child})
      LIST(APPEND dirlist ${child})
    ENDIF()
  ENDFOREACH()
  SET(${result} ${dirlist})
ENDMACRO()

MACRO(SUBLIBLIST shared_result static_result curdir)
  FILE(GLOB children RELATIVE ${curdir} ${curdir}/lib*.so)
  SET(filelist "")
  FOREACH(child ${children})
    IF(IS_DIRECTORY ${curdir}/${child})
    ELSE(IS_DIRECTORY ${curdir}/${child})
      LIST(APPEND filelist ${child})
    ENDIF()
  ENDFOREACH()
  SET(${shared_result} ${filelist})

  FILE(GLOB children RELATIVE ${curdir} ${curdir}/lib*.a)
  SET(filelist "")
  FOREACH(child ${children})
    IF(IS_DIRECTORY ${curdir}/${child})
    ELSE(IS_DIRECTORY ${curdir}/${child})
      LIST(APPEND filelist ${child})
    ENDIF()
  ENDFOREACH()
  SET(${static_result} ${filelist})
ENDMACRO()

MACRO(IMPORT_ONE_LIB DEP_DIR)
  SET(DEP_LIBDIR ${DEP_DIR}/lib)
  if(NOT EXISTS ${DEP_LIBDIR})
    SET(DEP_LIBDIR ${DEP_DIR}/lib64)
  endif()
  SUBLIBLIST(SHARED_LIBS STATIC_LIBS ${DEP_LIBDIR})
  list(LENGTH SHARED_LIBS shared_count)
  list(LENGTH STATIC_LIBS static_count)
  message(STATUS "${dep} shared_count : ${shared_count}")
  message(STATUS "${dep} static_count : ${static_count}")
  INCLUDE_DIRECTORIES(${DEP_DIR}/include)

  set_property(GLOBAL APPEND PROPERTY GLOBAL_INCLUDE_DIRS "${DEP_DIR}/include")
  set_property(GLOBAL APPEND PROPERTY GLOBAL_LINK_DIRS ${DEP_LIBDIR})

  set(mkl_regex ".*mkl.*")
  
  if (${shared_count} STREQUAL "0")
    if (${static_count} STREQUAL "0")
      message(STATUS "${DEP_DIR} has no lib to import")
    else (${static_count} STREQUAL "0")
      FILE(GLOB children RELATIVE ${DEP_LIBDIR} ${DEP_LIBDIR}/lib*.a)
      foreach(libs ${children})
          string(REGEX REPLACE "^lib" "" _lib_name ${libs})
          string(REGEX REPLACE "\\.a" "" _lib_name ${_lib_name})

          if(TARGET ${_lib_name})
              get_property(_lib_name_dir TARGET ${_lib_name}  PROPERTY IMPORTED_LOCATION)
              log_warn("${_lib_name} already add at:${_lib_name_dir} skip ${DEP_LIBDIR}/${libs}")
              continue()
          endif()

          add_library(${_lib_name} STATIC IMPORTED)
          set_property(TARGET ${_lib_name}  PROPERTY IMPORTED_LOCATION ${DEP_LIBDIR}/${libs})
          log_debug("SET ${_lib_name}: ${DEP_LIBDIR}/${libs}")
      endforeach()
    endif()
  else (${shared_count} STREQUAL "0")
    FILE(GLOB children RELATIVE ${DEP_LIBDIR} ${DEP_LIBDIR}/lib*.so)
    foreach(libs ${children})
        string(REGEX REPLACE "^lib" "" _lib_name ${libs})
        string(REGEX REPLACE "\\.so" "" _lib_name ${_lib_name})

        if(TARGET ${_lib_name})
            get_property(_lib_name_dir TARGET ${_lib_name}  PROPERTY IMPORTED_LOCATION)
            log_warn("${_lib_name} already add at:${_lib_name_dir} skip ${DEP_LIBDIR}/${libs}")
            continue()
        endif()

        add_library(${_lib_name} SHARED IMPORTED)
        set_property(TARGET ${_lib_name}  PROPERTY IMPORTED_LOCATION ${DEP_LIBDIR}/${libs})
        log_debug("SET ${_lib_name}: ${DEP_LIBDIR}/${libs}")

        if ("${_lib_name}" MATCHES "${mkl_regex}")
            log_debug("${_lib_name}: IMPORTED_NO_SONAME")
            set_property(TARGET ${_lib_name}  PROPERTY IMPORTED_NO_SONAME 1)
        endif()

    endforeach()
  endif()
ENDMACRO()

MACRO(ADD_THIRD_LIB THIRD_PATH)
  SUBDIRLIST(SUB_THIRD_DIRS ${THIRD_PATH})
  message(STATUS "SUB_THIRD_LIBS: ${SUB_THIRD_DIRS}")
  set(cuda8_regex ".*cuda8.*")
  set(cuda9_regex ".*cuda9.*")
  set(cuda10_regex ".*cuda10.*")

  foreach(dep ${SUB_THIRD_DIRS})
      message(STATUS "dep: ${dep}")
      if("${dep}" MATCHES "${cuda8_regex}")
          if(${CUDA8_0})
            message(STATUS "add ${THIRD_PATH}/${deps}")
            IMPORT_ONE_LIB(${THIRD_PATH}/${dep})
            set(CUDA_NVCC_FLAGS "${CUDA_NVCC_FLAGS} -Xcompiler -fPIC -O3 --compiler-options -fno-strict-aliasing -lineinfo -Xptxas -dlcm=cg -use_fast_math -gencode arch=compute_61,code=sm_61 -gencode arch=compute_60,code=sm_60 -gencode arch=compute_52,code=sm_52" CACHE STRING "cuda flags")
            message(STATUS "CUDA_NVCC_FLAGS:${CUDA_NVCC_FLAGS}")
          endif(${CUDA8_0})
      elseif("${dep}" MATCHES "${cuda9_regex}")
          if(${CUDA9_0})
            message(STATUS "add ${THIRD_PATH}/${deps}")
            IMPORT_ONE_LIB(${THIRD_PATH}/${dep})
            set(CUDA_NVCC_FLAGS "${CUDA_NVCC_FLAGS} -Xcompiler -fPIC -O3 --compiler-options -fno-strict-aliasing -lineinfo -Xptxas -dlcm=cg -use_fast_math -gencode arch=compute_70,code=sm_70 -gencode arch=compute_61,code=sm_61 -gencode arch=compute_60,code=sm_60 -gencode arch=compute_52,code=sm_52" CACHE STRING "cuda flags")
            message(STATUS "CUDA_NVCC_FLAGS:${CUDA_NVCC_FLAGS}")
          endif(${CUDA9_0})
      elseif("${dep}" MATCHES "${cuda10_regex}")
          if(${CUDA10_0})
            message(STATUS "add ${THIRD_PATH}/${deps}")
            IMPORT_ONE_LIB(${THIRD_PATH}/${dep})
            set(CUDA_NVCC_FLAGS "${CUDA_NVCC_FLAGS} -Xcompiler -fPIC -O3 --compiler-options -fno-strict-aliasing -lineinfo -Xptxas -dlcm=cg -use_fast_math -gencode arch=compute_75,code=sm_75 -gencode arch=compute_70,code=sm_70 -gencode arch=compute_61,code=sm_61 -gencode arch=compute_60,code=sm_60 -gencode arch=compute_52,code=sm_52" CACHE STRING "cuda flags")
            message(STATUS "CUDA_NVCC_FLAGS:${CUDA_NVCC_FLAGS}")
          endif(${CUDA10_0})
      else("${dep}" MATCHES "${cuda8_regex}")
        message(STATUS "not cuda8 or cuda9 lib. normal import")
        IMPORT_ONE_LIB(${THIRD_PATH}/${dep})
      endif("${dep}" MATCHES "${cuda8_regex}")
  endforeach()
ENDMACRO()

# Usage in your CMakeLists:
# Describe property
define_property(GLOBAL PROPERTY GLOBAL_INCLUDE_DIRS
	        BRIEF_DOCS "GLOBAL_INCLUDE_DIRS"
	        FULL_DOCS "GLOBAL_INCLUDE_DIRS")
define_property(GLOBAL PROPERTY GLOBAL_LINK_DIRS
		BRIEF_DOCS "GLOBAL_LINK_DIRS"
		FULL_DOCS "GLOBAL_LINK_DIRS")
# Initialize property
set_property(GLOBAL PROPERTY GLOBAL_INCLUDE_DIRS "")
set_property(GLOBAL PROPERTY GLOBAL_LINK_DIRS "")


#build type
#flag to import CUDA8.0/9.0/10.0
option(BUILD_CUDA8_0 "BUILD_CUDA8_0" OFF)
set(CUDA8_0 FALSE)
if(BUILD_CUDA8_0)
    set(CUDA8_0 TRUE)
endif(BUILD_CUDA8_0)

option(BUILD_CUDA9_0 "BUILD_CUDA9_0" OFF)
set(CUDA9_0 FALSE)
if(BUILD_CUDA9_0)
    set(CUDA9_0 TRUE)
endif(BUILD_CUDA9_0)

option(BUILD_CUDA10_0 "BUILD_CUDA10_0" OFF)
set(CUDA10_0 FALSE)
if(BUILD_CUDA10_0)
    set(CUDA10_0 TRUE)
endif(BUILD_CUDA10_0)

set(THIRD_PATH  ${CMAKE_SOURCE_DIR}/third_path)
if(NOT EXISTS ${THIRD_PATH}) 
    set(THIRD_PATH ${CMAKE_SOURCE_DIR}/../third_path)
endif()
message(STATUS "THIRD_PATH;${THIRD_PATH}")
ADD_THIRD_LIB(${THIRD_PATH})

IF(CUDA8_0)
    set(CUDA_TOOLKIT_ROOT_DIR ${THIRD_PATH}/cuda8_0)
    include(FindCUDA)
    message(STATUS "FindCUDA - CUDA_TOOLKIT_ROOT_DIR: ${THIRD_PATH}/cuda8_0; ")
ELSE(CUDA8_0)
    IF(IS_DIRECTORY ${THIRD_PATH}/cuda)
    set(CUDA_TOOLKIT_ROOT_DIR ${THIRD_PATH}/cuda)
    include(FindCUDA)
    ELSE(IS_DIRECTORY ${THIRD_PATH}/cuda)
    ENDIF()
ENDIF()

IF(CUDA9_0)
    set(CUDA_TOOLKIT_ROOT_DIR ${THIRD_PATH}/cuda9_0)
    include(FindCUDA)
    message(STATUS "FindCUDA - CUDA_TOOLKIT_ROOT_DIR: ${THIRD_PATH}/cuda9_0; ")
ELSE(CUDA9_0)
    IF(IS_DIRECTORY ${THIRD_PATH}/cuda)
    set(CUDA_TOOLKIT_ROOT_DIR ${THIRD_PATH}/cuda)
    include(FindCUDA)
    ELSE(IS_DIRECTORY ${THIRD_PATH}/cuda)
    ENDIF()
ENDIF()

IF(CUDA10_0)
    set(CUDA_TOOLKIT_ROOT_DIR ${THIRD_PATH}/cuda10_0)
    include(FindCUDA)
    message(STATUS "FindCUDA - CUDA_TOOLKIT_ROOT_DIR: ${THIRD_PATH}/cuda10_0; ")
ELSE(CUDA10_0)
    IF(IS_DIRECTORY ${THIRD_PATH}/cuda)
    set(CUDA_TOOLKIT_ROOT_DIR ${THIRD_PATH}/cuda)
    include(FindCUDA)
    ELSE(IS_DIRECTORY ${THIRD_PATH}/cuda)
    ENDIF()
ENDIF()

# Get property
get_property(GLOBAL_INCLUDE_DIRS_LIST GLOBAL PROPERTY GLOBAL_INCLUDE_DIRS)
get_property(GLOBAL_LINK_DIRS_LIST GLOBAL PROPERTY GLOBAL_LINK_DIRS)

INCLUDE_DIRECTORIES(${GLOBAL_INCLUDE_DIRS_LIST})
LINK_DIRECTORIES(${GLOBAL_LINK_DIRS_LIST})

