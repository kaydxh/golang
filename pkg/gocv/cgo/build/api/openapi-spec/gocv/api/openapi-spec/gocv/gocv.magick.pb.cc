// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api/openapi-spec/gocv/gocv.magick.proto

#include "api/openapi-spec/gocv/gocv.magick.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_api_2fopenapi_2dspec_2ftypes_2fcode_2fsdk_2dgo_2ecode_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_api_2fopenapi_2dspec_2ftypes_2fcode_2fsdk_2dgo_2ecode_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CgoError;
}  // namespace protobuf_api_2fopenapi_2dspec_2ftypes_2fcode_2fsdk_2dgo_2ecode_2eproto
namespace sdk {
namespace api {
namespace gocv {
class MagickInitializeMagickRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MagickInitializeMagickRequest>
      _instance;
} _MagickInitializeMagickRequest_default_instance_;
class MagickInitializeMagickResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MagickInitializeMagickResponse>
      _instance;
} _MagickInitializeMagickResponse_default_instance_;
}  // namespace gocv
}  // namespace api
}  // namespace sdk
namespace protobuf_api_2fopenapi_2dspec_2fgocv_2fgocv_2emagick_2eproto {
static void InitDefaultsMagickInitializeMagickRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sdk::api::gocv::_MagickInitializeMagickRequest_default_instance_;
    new (ptr) ::sdk::api::gocv::MagickInitializeMagickRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sdk::api::gocv::MagickInitializeMagickRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MagickInitializeMagickRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMagickInitializeMagickRequest}, {}};

static void InitDefaultsMagickInitializeMagickResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sdk::api::gocv::_MagickInitializeMagickResponse_default_instance_;
    new (ptr) ::sdk::api::gocv::MagickInitializeMagickResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sdk::api::gocv::MagickInitializeMagickResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_MagickInitializeMagickResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsMagickInitializeMagickResponse}, {
      &protobuf_api_2fopenapi_2dspec_2ftypes_2fcode_2fsdk_2dgo_2ecode_2eproto::scc_info_CgoError.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_MagickInitializeMagickRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MagickInitializeMagickResponse.base);
}

::google::protobuf::Metadata file_level_metadata[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sdk::api::gocv::MagickInitializeMagickRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sdk::api::gocv::MagickInitializeMagickRequest, path_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sdk::api::gocv::MagickInitializeMagickResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sdk::api::gocv::MagickInitializeMagickResponse, error_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::sdk::api::gocv::MagickInitializeMagickRequest)},
  { 6, -1, sizeof(::sdk::api::gocv::MagickInitializeMagickResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::sdk::api::gocv::_MagickInitializeMagickRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sdk::api::gocv::_MagickInitializeMagickResponse_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "api/openapi-spec/gocv/gocv.magick.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\'api/openapi-spec/gocv/gocv.magick.prot"
      "o\022\014sdk.api.gocv\032-api/openapi-spec/types/"
      "code/sdk-go.code.proto\"-\n\035MagickInitiali"
      "zeMagickRequest\022\014\n\004path\030\001 \001(\t\"I\n\036MagickI"
      "nitializeMagickResponse\022\'\n\005error\030\001 \001(\0132\030"
      ".sdk.types.code.CgoErrorB=Z;github.com/k"
      "aydxh/golang/pkg/cgo/api/openapi-spec/go"
      "cv;gocvb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 295);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "api/openapi-spec/gocv/gocv.magick.proto", &protobuf_RegisterTypes);
  ::protobuf_api_2fopenapi_2dspec_2ftypes_2fcode_2fsdk_2dgo_2ecode_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_api_2fopenapi_2dspec_2fgocv_2fgocv_2emagick_2eproto
namespace sdk {
namespace api {
namespace gocv {

// ===================================================================

void MagickInitializeMagickRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MagickInitializeMagickRequest::kPathFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MagickInitializeMagickRequest::MagickInitializeMagickRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_api_2fopenapi_2dspec_2fgocv_2fgocv_2emagick_2eproto::scc_info_MagickInitializeMagickRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sdk.api.gocv.MagickInitializeMagickRequest)
}
MagickInitializeMagickRequest::MagickInitializeMagickRequest(const MagickInitializeMagickRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.path().size() > 0) {
    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  // @@protoc_insertion_point(copy_constructor:sdk.api.gocv.MagickInitializeMagickRequest)
}

void MagickInitializeMagickRequest::SharedCtor() {
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

MagickInitializeMagickRequest::~MagickInitializeMagickRequest() {
  // @@protoc_insertion_point(destructor:sdk.api.gocv.MagickInitializeMagickRequest)
  SharedDtor();
}

void MagickInitializeMagickRequest::SharedDtor() {
  path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MagickInitializeMagickRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MagickInitializeMagickRequest::descriptor() {
  ::protobuf_api_2fopenapi_2dspec_2fgocv_2fgocv_2emagick_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2fopenapi_2dspec_2fgocv_2fgocv_2emagick_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MagickInitializeMagickRequest& MagickInitializeMagickRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_api_2fopenapi_2dspec_2fgocv_2fgocv_2emagick_2eproto::scc_info_MagickInitializeMagickRequest.base);
  return *internal_default_instance();
}


void MagickInitializeMagickRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sdk.api.gocv.MagickInitializeMagickRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool MagickInitializeMagickRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sdk.api.gocv.MagickInitializeMagickRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string path = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->path().data(), static_cast<int>(this->path().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "sdk.api.gocv.MagickInitializeMagickRequest.path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sdk.api.gocv.MagickInitializeMagickRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sdk.api.gocv.MagickInitializeMagickRequest)
  return false;
#undef DO_
}

void MagickInitializeMagickRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sdk.api.gocv.MagickInitializeMagickRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string path = 1;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), static_cast<int>(this->path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "sdk.api.gocv.MagickInitializeMagickRequest.path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->path(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sdk.api.gocv.MagickInitializeMagickRequest)
}

::google::protobuf::uint8* MagickInitializeMagickRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sdk.api.gocv.MagickInitializeMagickRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string path = 1;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), static_cast<int>(this->path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "sdk.api.gocv.MagickInitializeMagickRequest.path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->path(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sdk.api.gocv.MagickInitializeMagickRequest)
  return target;
}

size_t MagickInitializeMagickRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sdk.api.gocv.MagickInitializeMagickRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string path = 1;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->path());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MagickInitializeMagickRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sdk.api.gocv.MagickInitializeMagickRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const MagickInitializeMagickRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MagickInitializeMagickRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sdk.api.gocv.MagickInitializeMagickRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sdk.api.gocv.MagickInitializeMagickRequest)
    MergeFrom(*source);
  }
}

void MagickInitializeMagickRequest::MergeFrom(const MagickInitializeMagickRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sdk.api.gocv.MagickInitializeMagickRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.path().size() > 0) {

    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
}

void MagickInitializeMagickRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sdk.api.gocv.MagickInitializeMagickRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MagickInitializeMagickRequest::CopyFrom(const MagickInitializeMagickRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sdk.api.gocv.MagickInitializeMagickRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MagickInitializeMagickRequest::IsInitialized() const {
  return true;
}

void MagickInitializeMagickRequest::Swap(MagickInitializeMagickRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MagickInitializeMagickRequest::InternalSwap(MagickInitializeMagickRequest* other) {
  using std::swap;
  path_.Swap(&other->path_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MagickInitializeMagickRequest::GetMetadata() const {
  protobuf_api_2fopenapi_2dspec_2fgocv_2fgocv_2emagick_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2fopenapi_2dspec_2fgocv_2fgocv_2emagick_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MagickInitializeMagickResponse::InitAsDefaultInstance() {
  ::sdk::api::gocv::_MagickInitializeMagickResponse_default_instance_._instance.get_mutable()->error_ = const_cast< ::sdk::types::code::CgoError*>(
      ::sdk::types::code::CgoError::internal_default_instance());
}
void MagickInitializeMagickResponse::clear_error() {
  if (GetArenaNoVirtual() == NULL && error_ != NULL) {
    delete error_;
  }
  error_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MagickInitializeMagickResponse::kErrorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MagickInitializeMagickResponse::MagickInitializeMagickResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_api_2fopenapi_2dspec_2fgocv_2fgocv_2emagick_2eproto::scc_info_MagickInitializeMagickResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sdk.api.gocv.MagickInitializeMagickResponse)
}
MagickInitializeMagickResponse::MagickInitializeMagickResponse(const MagickInitializeMagickResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_error()) {
    error_ = new ::sdk::types::code::CgoError(*from.error_);
  } else {
    error_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:sdk.api.gocv.MagickInitializeMagickResponse)
}

void MagickInitializeMagickResponse::SharedCtor() {
  error_ = NULL;
}

MagickInitializeMagickResponse::~MagickInitializeMagickResponse() {
  // @@protoc_insertion_point(destructor:sdk.api.gocv.MagickInitializeMagickResponse)
  SharedDtor();
}

void MagickInitializeMagickResponse::SharedDtor() {
  if (this != internal_default_instance()) delete error_;
}

void MagickInitializeMagickResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MagickInitializeMagickResponse::descriptor() {
  ::protobuf_api_2fopenapi_2dspec_2fgocv_2fgocv_2emagick_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2fopenapi_2dspec_2fgocv_2fgocv_2emagick_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MagickInitializeMagickResponse& MagickInitializeMagickResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_api_2fopenapi_2dspec_2fgocv_2fgocv_2emagick_2eproto::scc_info_MagickInitializeMagickResponse.base);
  return *internal_default_instance();
}


void MagickInitializeMagickResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sdk.api.gocv.MagickInitializeMagickResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && error_ != NULL) {
    delete error_;
  }
  error_ = NULL;
  _internal_metadata_.Clear();
}

bool MagickInitializeMagickResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sdk.api.gocv.MagickInitializeMagickResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .sdk.types.code.CgoError error = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sdk.api.gocv.MagickInitializeMagickResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sdk.api.gocv.MagickInitializeMagickResponse)
  return false;
#undef DO_
}

void MagickInitializeMagickResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sdk.api.gocv.MagickInitializeMagickResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sdk.types.code.CgoError error = 1;
  if (this->has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_error(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sdk.api.gocv.MagickInitializeMagickResponse)
}

::google::protobuf::uint8* MagickInitializeMagickResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sdk.api.gocv.MagickInitializeMagickResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sdk.types.code.CgoError error = 1;
  if (this->has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_error(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sdk.api.gocv.MagickInitializeMagickResponse)
  return target;
}

size_t MagickInitializeMagickResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sdk.api.gocv.MagickInitializeMagickResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .sdk.types.code.CgoError error = 1;
  if (this->has_error()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *error_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MagickInitializeMagickResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sdk.api.gocv.MagickInitializeMagickResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const MagickInitializeMagickResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MagickInitializeMagickResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sdk.api.gocv.MagickInitializeMagickResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sdk.api.gocv.MagickInitializeMagickResponse)
    MergeFrom(*source);
  }
}

void MagickInitializeMagickResponse::MergeFrom(const MagickInitializeMagickResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sdk.api.gocv.MagickInitializeMagickResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_error()) {
    mutable_error()->::sdk::types::code::CgoError::MergeFrom(from.error());
  }
}

void MagickInitializeMagickResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sdk.api.gocv.MagickInitializeMagickResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MagickInitializeMagickResponse::CopyFrom(const MagickInitializeMagickResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sdk.api.gocv.MagickInitializeMagickResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MagickInitializeMagickResponse::IsInitialized() const {
  return true;
}

void MagickInitializeMagickResponse::Swap(MagickInitializeMagickResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MagickInitializeMagickResponse::InternalSwap(MagickInitializeMagickResponse* other) {
  using std::swap;
  swap(error_, other->error_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MagickInitializeMagickResponse::GetMetadata() const {
  protobuf_api_2fopenapi_2dspec_2fgocv_2fgocv_2emagick_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_api_2fopenapi_2dspec_2fgocv_2fgocv_2emagick_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace gocv
}  // namespace api
}  // namespace sdk
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sdk::api::gocv::MagickInitializeMagickRequest* Arena::CreateMaybeMessage< ::sdk::api::gocv::MagickInitializeMagickRequest >(Arena* arena) {
  return Arena::CreateInternal< ::sdk::api::gocv::MagickInitializeMagickRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sdk::api::gocv::MagickInitializeMagickResponse* Arena::CreateMaybeMessage< ::sdk::api::gocv::MagickInitializeMagickResponse >(Arena* arena) {
  return Arena::CreateInternal< ::sdk::api::gocv::MagickInitializeMagickResponse >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
