/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.1.1
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

// source: pycv.swigcxx


extern
#ifdef __cplusplus
  "C"
#endif
  void cgo_panic__pycv_ffa8ea6aa3be9035(const char*);
static void _swig_gopanic(const char *p) {
  cgo_panic__pycv_ffa8ea6aa3be9035(p);
}



#define SWIG_VERSION 0x040101
#define SWIGGO
#define SWIGMODULE pycv
#define SWIG_DIRECTORS
/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#include <stddef.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/types.h>



typedef long long intgo;
typedef unsigned long long uintgo;


# if !defined(__clang__) && (defined(__i386__) || defined(__x86_64__))
#   define SWIGSTRUCTPACKED __attribute__((__packed__, __gcc_struct__))
# else
#   define SWIGSTRUCTPACKED __attribute__((__packed__))
# endif



typedef struct { char *p; intgo n; } _gostring_;
typedef struct { void* array; intgo len; intgo cap; } _goslice_;



#define SWIG_exception(code, msg) _swig_gopanic(msg)


static _gostring_ Swig_AllocateString(const char *p, size_t l) {
  _gostring_ ret;
  ret.p = (char*)malloc(l);
  memcpy(ret.p, p, l);
  ret.n = l;
  return ret;
}

/* -----------------------------------------------------------------------------
 * director_common.swg
 *
 * This file contains support for director classes which is common between
 * languages.
 * ----------------------------------------------------------------------------- */

/*
  Use -DSWIG_DIRECTOR_STATIC if you prefer to avoid the use of the
  'Swig' namespace. This could be useful for multi-modules projects.
*/
#ifdef SWIG_DIRECTOR_STATIC
/* Force anonymous (static) namespace */
#define Swig
#endif
/* -----------------------------------------------------------------------------
 * director.swg
 *
 * This file contains support for director classes so that Go proxy
 * methods can be called from C++.
 * ----------------------------------------------------------------------------- */

#include <exception>
#include <map>

namespace Swig {

  class DirectorException : public std::exception {
  };
}

/* Handle memory management for directors.  */

namespace {
  struct GCItem {
    virtual ~GCItem() {}
  };

  struct GCItem_var {
    GCItem_var(GCItem *item = 0) : _item(item) {
    }

    GCItem_var& operator=(GCItem *item) {
      GCItem *tmp = _item;
      _item = item;
      delete tmp;
      return *this;
    }

    ~GCItem_var() {
      delete _item;
    }

    GCItem* operator->() {
      return _item;
    }

    private:
      GCItem *_item;
  };

  template <typename Type>
  struct GCItem_T : GCItem {
    GCItem_T(Type *ptr) : _ptr(ptr) {
    }

    virtual ~GCItem_T() {
      delete _ptr;
    }

  private:
    Type *_ptr;
  };
}

class Swig_memory {
public:
  template <typename Type>
  void swig_acquire_pointer(Type* vptr) {
    if (vptr) {
      swig_owner[vptr] = new GCItem_T<Type>(vptr);
    }
  }
private:
  typedef std::map<void *, GCItem_var> swig_ownership_map;
  swig_ownership_map swig_owner;
};

template <typename Type>
static void swig_acquire_pointer(Swig_memory** pmem, Type* ptr) {
  if (!pmem) {
    *pmem = new Swig_memory;
  }
  (*pmem)->swig_acquire_pointer(ptr);
}

#ifdef __cplusplus
#include <utility>
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigSmartPointer {
    T *ptr;
    SwigSmartPointer(T *p) : ptr(p) { }
    ~SwigSmartPointer() { delete ptr; }
    SwigSmartPointer& operator=(SwigSmartPointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
    void reset(T *p) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = p; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigSmartPointer tmp(new T(t)); pointer = tmp; return *this; }
#if __cplusplus >=201103L
  SwigValueWrapper& operator=(T&& t) { SwigSmartPointer tmp(new T(std::move(t))); pointer = tmp; return *this; }
  operator T&&() const { return std::move(*pointer.ptr); }
#else
  operator T&() const { return *pointer.ptr; }
#endif
  T *operator&() const { return pointer.ptr; }
  static void reset(SwigValueWrapper& t, T *p) { t.pointer.reset(p); }
};

/*
 * SwigValueInit() is a generic initialisation solution as the following approach:
 * 
 *       T c_result = T();
 * 
 * doesn't compile for all types for example:
 * 
 *       unsigned int c_result = unsigned int();
 */
template <typename T> T SwigValueInit() {
  return T();
}

#if __cplusplus >=201103L
# define SWIG_STD_MOVE(OBJ) std::move(OBJ)
#else
# define SWIG_STD_MOVE(OBJ) OBJ
#endif

#endif


static void Swig_free(void* p) {
  free(p);
}

static void* Swig_malloc(int c) {
  return malloc(c);
}


#include <typeinfo>
#include <stdexcept>


#include <map>
#include <algorithm>
#include <stdexcept>


#include <string>


#include <vector>
#include <stdexcept>


#include "pycv.h"





// C++ director class methods.
#include "pycv_wrap.h"

#ifdef __cplusplus
extern "C" {
#endif

void _wrap_Swig_free_pycv_ffa8ea6aa3be9035(void *_swig_go_0) {
  void *arg1 = (void *) 0 ;
  
  arg1 = *(void **)&_swig_go_0; 
  
  Swig_free(arg1);
  
}


void *_wrap_Swig_malloc_pycv_ffa8ea6aa3be9035(intgo _swig_go_0) {
  int arg1 ;
  void *result = 0 ;
  void *_swig_go_result;
  
  arg1 = (int)_swig_go_0; 
  
  result = (void *)Swig_malloc(arg1);
  *(void **)&_swig_go_result = (void *)result; 
  return _swig_go_result;
}


void _wrap_LocalInitRequest_gpu_id_set_pycv_ffa8ea6aa3be9035(pycv::LocalInitRequest *_swig_go_0, intgo _swig_go_1) {
  pycv::LocalInitRequest *arg1 = (pycv::LocalInitRequest *) 0 ;
  int arg2 ;
  
  arg1 = *(pycv::LocalInitRequest **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  if (arg1) (arg1)->gpu_id = arg2;
  
}


intgo _wrap_LocalInitRequest_gpu_id_get_pycv_ffa8ea6aa3be9035(pycv::LocalInitRequest *_swig_go_0) {
  pycv::LocalInitRequest *arg1 = (pycv::LocalInitRequest *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(pycv::LocalInitRequest **)&_swig_go_0; 
  
  result = (int) ((arg1)->gpu_id);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_LocalInitRequest_sdk_dir_set_pycv_ffa8ea6aa3be9035(pycv::LocalInitRequest *_swig_go_0, _gostring_ _swig_go_1) {
  pycv::LocalInitRequest *arg1 = (pycv::LocalInitRequest *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(pycv::LocalInitRequest **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->sdk_dir = *arg2;
  
}


_gostring_ _wrap_LocalInitRequest_sdk_dir_get_pycv_ffa8ea6aa3be9035(pycv::LocalInitRequest *_swig_go_0) {
  pycv::LocalInitRequest *arg1 = (pycv::LocalInitRequest *) 0 ;
  std::string *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(pycv::LocalInitRequest **)&_swig_go_0; 
  
  result = (std::string *) & ((arg1)->sdk_dir);
  _swig_go_result = Swig_AllocateString((*result).data(), (*result).length()); 
  return _swig_go_result;
}


void _wrap_LocalInitRequest_model_dir_set_pycv_ffa8ea6aa3be9035(pycv::LocalInitRequest *_swig_go_0, _gostring_ _swig_go_1) {
  pycv::LocalInitRequest *arg1 = (pycv::LocalInitRequest *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(pycv::LocalInitRequest **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->model_dir = *arg2;
  
}


_gostring_ _wrap_LocalInitRequest_model_dir_get_pycv_ffa8ea6aa3be9035(pycv::LocalInitRequest *_swig_go_0) {
  pycv::LocalInitRequest *arg1 = (pycv::LocalInitRequest *) 0 ;
  std::string *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(pycv::LocalInitRequest **)&_swig_go_0; 
  
  result = (std::string *) & ((arg1)->model_dir);
  _swig_go_result = Swig_AllocateString((*result).data(), (*result).length()); 
  return _swig_go_result;
}


pycv::LocalInitRequest *_wrap_new_LocalInitRequest_pycv_ffa8ea6aa3be9035() {
  pycv::LocalInitRequest *result = 0 ;
  pycv::LocalInitRequest *_swig_go_result;
  
  
  {
    try {
      result = (pycv::LocalInitRequest *)new pycv::LocalInitRequest();;
    } catch (const std::exception& e) {
      _swig_gopanic(e.what());
    }
  }
  *(pycv::LocalInitRequest **)&_swig_go_result = (pycv::LocalInitRequest *)result; 
  return _swig_go_result;
}


void _wrap_delete_LocalInitRequest_pycv_ffa8ea6aa3be9035(pycv::LocalInitRequest *_swig_go_0) {
  pycv::LocalInitRequest *arg1 = (pycv::LocalInitRequest *) 0 ;
  
  arg1 = *(pycv::LocalInitRequest **)&_swig_go_0; 
  
  {
    try {
      delete arg1;;
    } catch (const std::exception& e) {
      _swig_gopanic(e.what());
    }
  }
  
}


pycv::LocalInitResponse *_wrap_new_LocalInitResponse_pycv_ffa8ea6aa3be9035() {
  pycv::LocalInitResponse *result = 0 ;
  pycv::LocalInitResponse *_swig_go_result;
  
  
  {
    try {
      result = (pycv::LocalInitResponse *)new pycv::LocalInitResponse();;
    } catch (const std::exception& e) {
      _swig_gopanic(e.what());
    }
  }
  *(pycv::LocalInitResponse **)&_swig_go_result = (pycv::LocalInitResponse *)result; 
  return _swig_go_result;
}


void _wrap_delete_LocalInitResponse_pycv_ffa8ea6aa3be9035(pycv::LocalInitResponse *_swig_go_0) {
  pycv::LocalInitResponse *arg1 = (pycv::LocalInitResponse *) 0 ;
  
  arg1 = *(pycv::LocalInitResponse **)&_swig_go_0; 
  
  {
    try {
      delete arg1;;
    } catch (const std::exception& e) {
      _swig_gopanic(e.what());
    }
  }
  
}


void _wrap_DoRequest_arg1_set_pycv_ffa8ea6aa3be9035(pycv::DoRequest *_swig_go_0, _gostring_ _swig_go_1) {
  pycv::DoRequest *arg1 = (pycv::DoRequest *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(pycv::DoRequest **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->arg1 = *arg2;
  
}


_gostring_ _wrap_DoRequest_arg1_get_pycv_ffa8ea6aa3be9035(pycv::DoRequest *_swig_go_0) {
  pycv::DoRequest *arg1 = (pycv::DoRequest *) 0 ;
  std::string *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(pycv::DoRequest **)&_swig_go_0; 
  
  result = (std::string *) & ((arg1)->arg1);
  _swig_go_result = Swig_AllocateString((*result).data(), (*result).length()); 
  return _swig_go_result;
}


void _wrap_DoRequest_arg2_set_pycv_ffa8ea6aa3be9035(pycv::DoRequest *_swig_go_0, _gostring_ _swig_go_1) {
  pycv::DoRequest *arg1 = (pycv::DoRequest *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(pycv::DoRequest **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->arg2 = *arg2;
  
}


_gostring_ _wrap_DoRequest_arg2_get_pycv_ffa8ea6aa3be9035(pycv::DoRequest *_swig_go_0) {
  pycv::DoRequest *arg1 = (pycv::DoRequest *) 0 ;
  std::string *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(pycv::DoRequest **)&_swig_go_0; 
  
  result = (std::string *) & ((arg1)->arg2);
  _swig_go_result = Swig_AllocateString((*result).data(), (*result).length()); 
  return _swig_go_result;
}


pycv::DoRequest *_wrap_new_DoRequest_pycv_ffa8ea6aa3be9035() {
  pycv::DoRequest *result = 0 ;
  pycv::DoRequest *_swig_go_result;
  
  
  {
    try {
      result = (pycv::DoRequest *)new pycv::DoRequest();;
    } catch (const std::exception& e) {
      _swig_gopanic(e.what());
    }
  }
  *(pycv::DoRequest **)&_swig_go_result = (pycv::DoRequest *)result; 
  return _swig_go_result;
}


void _wrap_delete_DoRequest_pycv_ffa8ea6aa3be9035(pycv::DoRequest *_swig_go_0) {
  pycv::DoRequest *arg1 = (pycv::DoRequest *) 0 ;
  
  arg1 = *(pycv::DoRequest **)&_swig_go_0; 
  
  {
    try {
      delete arg1;;
    } catch (const std::exception& e) {
      _swig_gopanic(e.what());
    }
  }
  
}


pycv::DoResponse *_wrap_new_DoResponse_pycv_ffa8ea6aa3be9035() {
  pycv::DoResponse *result = 0 ;
  pycv::DoResponse *_swig_go_result;
  
  
  {
    try {
      result = (pycv::DoResponse *)new pycv::DoResponse();;
    } catch (const std::exception& e) {
      _swig_gopanic(e.what());
    }
  }
  *(pycv::DoResponse **)&_swig_go_result = (pycv::DoResponse *)result; 
  return _swig_go_result;
}


void _wrap_delete_DoResponse_pycv_ffa8ea6aa3be9035(pycv::DoResponse *_swig_go_0) {
  pycv::DoResponse *arg1 = (pycv::DoResponse *) 0 ;
  
  arg1 = *(pycv::DoResponse **)&_swig_go_0; 
  
  {
    try {
      delete arg1;;
    } catch (const std::exception& e) {
      _swig_gopanic(e.what());
    }
  }
  
}


pycv::PyImage *_wrap_new_Wrapped_PyImage_pycv_ffa8ea6aa3be9035() {
  pycv::PyImage *result = 0 ;
  pycv::PyImage *_swig_go_result;
  
  
  {
    try {
      result = (pycv::PyImage *)new pycv::PyImage();;
    } catch (const std::exception& e) {
      _swig_gopanic(e.what());
    }
  }
  *(pycv::PyImage **)&_swig_go_result = (pycv::PyImage *)result; 
  return _swig_go_result;
}


void _wrap_delete_Wrapped_PyImage_pycv_ffa8ea6aa3be9035(pycv::PyImage *_swig_go_0) {
  pycv::PyImage *arg1 = (pycv::PyImage *) 0 ;
  
  arg1 = *(pycv::PyImage **)&_swig_go_0; 
  
  {
    try {
      delete arg1;;
    } catch (const std::exception& e) {
      _swig_gopanic(e.what());
    }
  }
  
}


void _wrap_Wrapped_PyImage_GlobalInit_pycv_ffa8ea6aa3be9035(_gostring_ _swig_go_0, intgo _swig_go_1) {
  std::string *arg1 = 0 ;
  int arg2 ;
  
  
  std::string arg1_str(_swig_go_0.p, _swig_go_0.n);
  arg1 = &arg1_str;
  
  arg2 = (int)_swig_go_1; 
  
  {
    try {
      pycv::PyImage::GlobalInit((std::string const &)*arg1,arg2);;
    } catch (const std::exception& e) {
      _swig_gopanic(e.what());
    }
  }
  
}


void _wrap_Wrapped_PyImage_GlobalRelease_pycv_ffa8ea6aa3be9035() {
  {
    try {
      pycv::PyImage::GlobalRelease();;
    } catch (const std::exception& e) {
      _swig_gopanic(e.what());
    }
  }
  
}


void _wrap_Wrapped_PyImage_Wrapped_PyImage_LocalInit_pycv_ffa8ea6aa3be9035(pycv::PyImage *_swig_go_0, pycv::LocalInitRequest *_swig_go_1, pycv::LocalInitResponse *_swig_go_2) {
  pycv::PyImage *arg1 = (pycv::PyImage *) 0 ;
  pycv::LocalInitRequest *arg2 = 0 ;
  pycv::LocalInitResponse *arg3 = 0 ;
  
  arg1 = *(pycv::PyImage **)&_swig_go_0; 
  arg2 = *(pycv::LocalInitRequest **)&_swig_go_1; 
  arg3 = *(pycv::LocalInitResponse **)&_swig_go_2; 
  
  {
    try {
      (arg1)->LocalInit((pycv::LocalInitRequest const &)*arg2,*arg3);;
    } catch (const std::exception& e) {
      _swig_gopanic(e.what());
    }
  }
  
}


void _wrap_Wrapped_PyImage_Wrapped_PyImage_Do_pycv_ffa8ea6aa3be9035(pycv::PyImage *_swig_go_0, pycv::DoRequest *_swig_go_1, pycv::DoResponse *_swig_go_2) {
  pycv::PyImage *arg1 = (pycv::PyImage *) 0 ;
  pycv::DoRequest *arg2 = 0 ;
  pycv::DoResponse *arg3 = 0 ;
  
  arg1 = *(pycv::PyImage **)&_swig_go_0; 
  arg2 = *(pycv::DoRequest **)&_swig_go_1; 
  arg3 = *(pycv::DoResponse **)&_swig_go_2; 
  
  {
    try {
      (arg1)->Do((pycv::DoRequest const &)*arg2,*arg3);;
    } catch (const std::exception& e) {
      _swig_gopanic(e.what());
    }
  }
  
}


#ifdef __cplusplus
}
#endif

