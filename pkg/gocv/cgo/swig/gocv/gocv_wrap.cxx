/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.1.1
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

// source: gocv.swigcxx


extern
#ifdef __cplusplus
  "C"
#endif
  void cgo_panic__gocv_ba346308b44e7b91(const char*);
static void _swig_gopanic(const char *p) {
  cgo_panic__gocv_ba346308b44e7b91(p);
}



#define SWIG_VERSION 0x040101
#define SWIGGO
#define SWIGMODULE gocv
#define SWIG_DIRECTORS
/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#include <stddef.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/types.h>



typedef long long intgo;
typedef unsigned long long uintgo;


# if !defined(__clang__) && (defined(__i386__) || defined(__x86_64__))
#   define SWIGSTRUCTPACKED __attribute__((__packed__, __gcc_struct__))
# else
#   define SWIGSTRUCTPACKED __attribute__((__packed__))
# endif



typedef struct { char *p; intgo n; } _gostring_;
typedef struct { void* array; intgo len; intgo cap; } _goslice_;



#define SWIG_exception(code, msg) _swig_gopanic(msg)


static _gostring_ Swig_AllocateString(const char *p, size_t l) {
  _gostring_ ret;
  ret.p = (char*)malloc(l);
  memcpy(ret.p, p, l);
  ret.n = l;
  return ret;
}

/* -----------------------------------------------------------------------------
 * director_common.swg
 *
 * This file contains support for director classes which is common between
 * languages.
 * ----------------------------------------------------------------------------- */

/*
  Use -DSWIG_DIRECTOR_STATIC if you prefer to avoid the use of the
  'Swig' namespace. This could be useful for multi-modules projects.
*/
#ifdef SWIG_DIRECTOR_STATIC
/* Force anonymous (static) namespace */
#define Swig
#endif
/* -----------------------------------------------------------------------------
 * director.swg
 *
 * This file contains support for director classes so that Go proxy
 * methods can be called from C++.
 * ----------------------------------------------------------------------------- */

#include <exception>
#include <map>

namespace Swig {

  class DirectorException : public std::exception {
  };
}

/* Handle memory management for directors.  */

namespace {
  struct GCItem {
    virtual ~GCItem() {}
  };

  struct GCItem_var {
    GCItem_var(GCItem *item = 0) : _item(item) {
    }

    GCItem_var& operator=(GCItem *item) {
      GCItem *tmp = _item;
      _item = item;
      delete tmp;
      return *this;
    }

    ~GCItem_var() {
      delete _item;
    }

    GCItem* operator->() {
      return _item;
    }

    private:
      GCItem *_item;
  };

  template <typename Type>
  struct GCItem_T : GCItem {
    GCItem_T(Type *ptr) : _ptr(ptr) {
    }

    virtual ~GCItem_T() {
      delete _ptr;
    }

  private:
    Type *_ptr;
  };
}

class Swig_memory {
public:
  template <typename Type>
  void swig_acquire_pointer(Type* vptr) {
    if (vptr) {
      swig_owner[vptr] = new GCItem_T<Type>(vptr);
    }
  }
private:
  typedef std::map<void *, GCItem_var> swig_ownership_map;
  swig_ownership_map swig_owner;
};

template <typename Type>
static void swig_acquire_pointer(Swig_memory** pmem, Type* ptr) {
  if (!pmem) {
    *pmem = new Swig_memory;
  }
  (*pmem)->swig_acquire_pointer(ptr);
}

#ifdef __cplusplus
#include <utility>
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigSmartPointer {
    T *ptr;
    SwigSmartPointer(T *p) : ptr(p) { }
    ~SwigSmartPointer() { delete ptr; }
    SwigSmartPointer& operator=(SwigSmartPointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
    void reset(T *p) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = p; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigSmartPointer tmp(new T(t)); pointer = tmp; return *this; }
#if __cplusplus >=201103L
  SwigValueWrapper& operator=(T&& t) { SwigSmartPointer tmp(new T(std::move(t))); pointer = tmp; return *this; }
  operator T&&() const { return std::move(*pointer.ptr); }
#else
  operator T&() const { return *pointer.ptr; }
#endif
  T *operator&() const { return pointer.ptr; }
  static void reset(SwigValueWrapper& t, T *p) { t.pointer.reset(p); }
};

/*
 * SwigValueInit() is a generic initialisation solution as the following approach:
 * 
 *       T c_result = T();
 * 
 * doesn't compile for all types for example:
 * 
 *       unsigned int c_result = unsigned int();
 */
template <typename T> T SwigValueInit() {
  return T();
}

#if __cplusplus >=201103L
# define SWIG_STD_MOVE(OBJ) std::move(OBJ)
#else
# define SWIG_STD_MOVE(OBJ) OBJ
#endif

#endif


static void Swig_free(void* p) {
  free(p);
}

static void* Swig_malloc(int c) {
  return malloc(c);
}


#include <typeinfo>
#include <stdexcept>


#include <map>
#include <algorithm>
#include <stdexcept>


#include <string>


#include <vector>
#include <stdexcept>


#include "gocv.h"





// C++ director class methods.
#include "gocv_wrap.h"

#ifdef __cplusplus
extern "C" {
#endif

void _wrap_Swig_free_gocv_ba346308b44e7b91(void *_swig_go_0) {
  void *arg1 = (void *) 0 ;
  
  arg1 = *(void **)&_swig_go_0; 
  
  Swig_free(arg1);
  
}


void *_wrap_Swig_malloc_gocv_ba346308b44e7b91(intgo _swig_go_0) {
  int arg1 ;
  void *result = 0 ;
  void *_swig_go_result;
  
  arg1 = (int)_swig_go_0; 
  
  result = (void *)Swig_malloc(arg1);
  *(void **)&_swig_go_result = (void *)result; 
  return _swig_go_result;
}


void _wrap_MagickInitializeMagickRequest_path_set_gocv_ba346308b44e7b91(gocv::MagickInitializeMagickRequest *_swig_go_0, _gostring_ _swig_go_1) {
  gocv::MagickInitializeMagickRequest *arg1 = (gocv::MagickInitializeMagickRequest *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(gocv::MagickInitializeMagickRequest **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->path = *arg2;
  
}


_gostring_ _wrap_MagickInitializeMagickRequest_path_get_gocv_ba346308b44e7b91(gocv::MagickInitializeMagickRequest *_swig_go_0) {
  gocv::MagickInitializeMagickRequest *arg1 = (gocv::MagickInitializeMagickRequest *) 0 ;
  std::string *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(gocv::MagickInitializeMagickRequest **)&_swig_go_0; 
  
  result = (std::string *) & ((arg1)->path);
  _swig_go_result = Swig_AllocateString((*result).data(), (*result).length()); 
  return _swig_go_result;
}


gocv::MagickInitializeMagickRequest *_wrap_new_MagickInitializeMagickRequest_gocv_ba346308b44e7b91() {
  gocv::MagickInitializeMagickRequest *result = 0 ;
  gocv::MagickInitializeMagickRequest *_swig_go_result;
  
  
  {
    try {
      result = (gocv::MagickInitializeMagickRequest *)new gocv::MagickInitializeMagickRequest();;
    } catch (const std::exception& e) {
      _swig_gopanic(e.what());
    }
  }
  *(gocv::MagickInitializeMagickRequest **)&_swig_go_result = (gocv::MagickInitializeMagickRequest *)result; 
  return _swig_go_result;
}


void _wrap_delete_MagickInitializeMagickRequest_gocv_ba346308b44e7b91(gocv::MagickInitializeMagickRequest *_swig_go_0) {
  gocv::MagickInitializeMagickRequest *arg1 = (gocv::MagickInitializeMagickRequest *) 0 ;
  
  arg1 = *(gocv::MagickInitializeMagickRequest **)&_swig_go_0; 
  
  {
    try {
      delete arg1;;
    } catch (const std::exception& e) {
      _swig_gopanic(e.what());
    }
  }
  
}


gocv::MagickInitializeMagickResponse *_wrap_new_MagickInitializeMagickResponse_gocv_ba346308b44e7b91() {
  gocv::MagickInitializeMagickResponse *result = 0 ;
  gocv::MagickInitializeMagickResponse *_swig_go_result;
  
  
  {
    try {
      result = (gocv::MagickInitializeMagickResponse *)new gocv::MagickInitializeMagickResponse();;
    } catch (const std::exception& e) {
      _swig_gopanic(e.what());
    }
  }
  *(gocv::MagickInitializeMagickResponse **)&_swig_go_result = (gocv::MagickInitializeMagickResponse *)result; 
  return _swig_go_result;
}


void _wrap_delete_MagickInitializeMagickResponse_gocv_ba346308b44e7b91(gocv::MagickInitializeMagickResponse *_swig_go_0) {
  gocv::MagickInitializeMagickResponse *arg1 = (gocv::MagickInitializeMagickResponse *) 0 ;
  
  arg1 = *(gocv::MagickInitializeMagickResponse **)&_swig_go_0; 
  
  {
    try {
      delete arg1;;
    } catch (const std::exception& e) {
      _swig_gopanic(e.what());
    }
  }
  
}


void _wrap_MagickImageDecodeRequest_image_set_gocv_ba346308b44e7b91(gocv::MagickImageDecodeRequest *_swig_go_0, _gostring_ _swig_go_1) {
  gocv::MagickImageDecodeRequest *arg1 = (gocv::MagickImageDecodeRequest *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(gocv::MagickImageDecodeRequest **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->image = *arg2;
  
}


_gostring_ _wrap_MagickImageDecodeRequest_image_get_gocv_ba346308b44e7b91(gocv::MagickImageDecodeRequest *_swig_go_0) {
  gocv::MagickImageDecodeRequest *arg1 = (gocv::MagickImageDecodeRequest *) 0 ;
  std::string *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(gocv::MagickImageDecodeRequest **)&_swig_go_0; 
  
  result = (std::string *) & ((arg1)->image);
  _swig_go_result = Swig_AllocateString((*result).data(), (*result).length()); 
  return _swig_go_result;
}


void _wrap_MagickImageDecodeRequest_target_color_space_set_gocv_ba346308b44e7b91(gocv::MagickImageDecodeRequest *_swig_go_0, _gostring_ _swig_go_1) {
  gocv::MagickImageDecodeRequest *arg1 = (gocv::MagickImageDecodeRequest *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(gocv::MagickImageDecodeRequest **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->target_color_space = *arg2;
  
}


_gostring_ _wrap_MagickImageDecodeRequest_target_color_space_get_gocv_ba346308b44e7b91(gocv::MagickImageDecodeRequest *_swig_go_0) {
  gocv::MagickImageDecodeRequest *arg1 = (gocv::MagickImageDecodeRequest *) 0 ;
  std::string *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(gocv::MagickImageDecodeRequest **)&_swig_go_0; 
  
  result = (std::string *) & ((arg1)->target_color_space);
  _swig_go_result = Swig_AllocateString((*result).data(), (*result).length()); 
  return _swig_go_result;
}


gocv::MagickImageDecodeRequest *_wrap_new_MagickImageDecodeRequest_gocv_ba346308b44e7b91() {
  gocv::MagickImageDecodeRequest *result = 0 ;
  gocv::MagickImageDecodeRequest *_swig_go_result;
  
  
  {
    try {
      result = (gocv::MagickImageDecodeRequest *)new gocv::MagickImageDecodeRequest();;
    } catch (const std::exception& e) {
      _swig_gopanic(e.what());
    }
  }
  *(gocv::MagickImageDecodeRequest **)&_swig_go_result = (gocv::MagickImageDecodeRequest *)result; 
  return _swig_go_result;
}


void _wrap_delete_MagickImageDecodeRequest_gocv_ba346308b44e7b91(gocv::MagickImageDecodeRequest *_swig_go_0) {
  gocv::MagickImageDecodeRequest *arg1 = (gocv::MagickImageDecodeRequest *) 0 ;
  
  arg1 = *(gocv::MagickImageDecodeRequest **)&_swig_go_0; 
  
  {
    try {
      delete arg1;;
    } catch (const std::exception& e) {
      _swig_gopanic(e.what());
    }
  }
  
}


intgo _wrap_UndefinedOrientation_gocv_ba346308b44e7b91() {
  gocv::OrientationType result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = gocv::UndefinedOrientation;
      ;
    } catch (const std::exception& e) {
      _swig_gopanic(e.what());
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_TopLeftOrientation_gocv_ba346308b44e7b91() {
  gocv::OrientationType result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = gocv::TopLeftOrientation;
      ;
    } catch (const std::exception& e) {
      _swig_gopanic(e.what());
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_TopRightOrientation_gocv_ba346308b44e7b91() {
  gocv::OrientationType result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = gocv::TopRightOrientation;
      ;
    } catch (const std::exception& e) {
      _swig_gopanic(e.what());
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_BottomRightOrientation_gocv_ba346308b44e7b91() {
  gocv::OrientationType result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = gocv::BottomRightOrientation;
      ;
    } catch (const std::exception& e) {
      _swig_gopanic(e.what());
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_BottomLeftOrientation_gocv_ba346308b44e7b91() {
  gocv::OrientationType result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = gocv::BottomLeftOrientation;
      ;
    } catch (const std::exception& e) {
      _swig_gopanic(e.what());
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_LeftTopOrientation_gocv_ba346308b44e7b91() {
  gocv::OrientationType result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = gocv::LeftTopOrientation;
      ;
    } catch (const std::exception& e) {
      _swig_gopanic(e.what());
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_RightTopOrientation_gocv_ba346308b44e7b91() {
  gocv::OrientationType result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = gocv::RightTopOrientation;
      ;
    } catch (const std::exception& e) {
      _swig_gopanic(e.what());
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_RightBottomOrientation_gocv_ba346308b44e7b91() {
  gocv::OrientationType result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = gocv::RightBottomOrientation;
      ;
    } catch (const std::exception& e) {
      _swig_gopanic(e.what());
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_LeftBottomOrientation_gocv_ba346308b44e7b91() {
  gocv::OrientationType result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = gocv::LeftBottomOrientation;
      ;
    } catch (const std::exception& e) {
      _swig_gopanic(e.what());
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_UndefinedColorspace_gocv_ba346308b44e7b91() {
  gocv::ColorspaceType result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = gocv::UndefinedColorspace;
      ;
    } catch (const std::exception& e) {
      _swig_gopanic(e.what());
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_RGBColorspace_gocv_ba346308b44e7b91() {
  gocv::ColorspaceType result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = gocv::RGBColorspace;
      ;
    } catch (const std::exception& e) {
      _swig_gopanic(e.what());
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_GRAYColorspace_gocv_ba346308b44e7b91() {
  gocv::ColorspaceType result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = gocv::GRAYColorspace;
      ;
    } catch (const std::exception& e) {
      _swig_gopanic(e.what());
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_TransparentColorspace_gocv_ba346308b44e7b91() {
  gocv::ColorspaceType result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = gocv::TransparentColorspace;
      ;
    } catch (const std::exception& e) {
      _swig_gopanic(e.what());
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_OHTAColorspace_gocv_ba346308b44e7b91() {
  gocv::ColorspaceType result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = gocv::OHTAColorspace;
      ;
    } catch (const std::exception& e) {
      _swig_gopanic(e.what());
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_XYZColorspace_gocv_ba346308b44e7b91() {
  gocv::ColorspaceType result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = gocv::XYZColorspace;
      ;
    } catch (const std::exception& e) {
      _swig_gopanic(e.what());
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_YCCColorspace_gocv_ba346308b44e7b91() {
  gocv::ColorspaceType result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = gocv::YCCColorspace;
      ;
    } catch (const std::exception& e) {
      _swig_gopanic(e.what());
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_YIQColorspace_gocv_ba346308b44e7b91() {
  gocv::ColorspaceType result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = gocv::YIQColorspace;
      ;
    } catch (const std::exception& e) {
      _swig_gopanic(e.what());
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_YPbPrColorspace_gocv_ba346308b44e7b91() {
  gocv::ColorspaceType result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = gocv::YPbPrColorspace;
      ;
    } catch (const std::exception& e) {
      _swig_gopanic(e.what());
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_YUVColorspace_gocv_ba346308b44e7b91() {
  gocv::ColorspaceType result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = gocv::YUVColorspace;
      ;
    } catch (const std::exception& e) {
      _swig_gopanic(e.what());
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_CMYKColorspace_gocv_ba346308b44e7b91() {
  gocv::ColorspaceType result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = gocv::CMYKColorspace;
      ;
    } catch (const std::exception& e) {
      _swig_gopanic(e.what());
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_sRGBColorspace_gocv_ba346308b44e7b91() {
  gocv::ColorspaceType result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = gocv::sRGBColorspace;
      ;
    } catch (const std::exception& e) {
      _swig_gopanic(e.what());
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_HSLColorspace_gocv_ba346308b44e7b91() {
  gocv::ColorspaceType result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = gocv::HSLColorspace;
      ;
    } catch (const std::exception& e) {
      _swig_gopanic(e.what());
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_HWBColorspace_gocv_ba346308b44e7b91() {
  gocv::ColorspaceType result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = gocv::HWBColorspace;
      ;
    } catch (const std::exception& e) {
      _swig_gopanic(e.what());
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_LABColorspace_gocv_ba346308b44e7b91() {
  gocv::ColorspaceType result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = gocv::LABColorspace;
      ;
    } catch (const std::exception& e) {
      _swig_gopanic(e.what());
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_CineonLogRGBColorspace_gocv_ba346308b44e7b91() {
  gocv::ColorspaceType result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = gocv::CineonLogRGBColorspace;
      ;
    } catch (const std::exception& e) {
      _swig_gopanic(e.what());
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_Rec601LumaColorspace_gocv_ba346308b44e7b91() {
  gocv::ColorspaceType result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = gocv::Rec601LumaColorspace;
      ;
    } catch (const std::exception& e) {
      _swig_gopanic(e.what());
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_Rec601YCbCrColorspace_gocv_ba346308b44e7b91() {
  gocv::ColorspaceType result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = gocv::Rec601YCbCrColorspace;
      ;
    } catch (const std::exception& e) {
      _swig_gopanic(e.what());
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_Rec709LumaColorspace_gocv_ba346308b44e7b91() {
  gocv::ColorspaceType result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = gocv::Rec709LumaColorspace;
      ;
    } catch (const std::exception& e) {
      _swig_gopanic(e.what());
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_Rec709YCbCrColorspace_gocv_ba346308b44e7b91() {
  gocv::ColorspaceType result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = gocv::Rec709YCbCrColorspace;
      ;
    } catch (const std::exception& e) {
      _swig_gopanic(e.what());
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


void _wrap_MagickImageDecodeResponse_mat_set_gocv_ba346308b44e7b91(gocv::MagickImageDecodeResponse *_swig_go_0, cv::Mat *_swig_go_1) {
  gocv::MagickImageDecodeResponse *arg1 = (gocv::MagickImageDecodeResponse *) 0 ;
  cv::Mat arg2 ;
  cv::Mat *argp2 ;
  
  arg1 = *(gocv::MagickImageDecodeResponse **)&_swig_go_0; 
  
  argp2 = (cv::Mat *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null cv::Mat");
  }
  arg2 = (cv::Mat)*argp2;
  
  
  if (arg1) (arg1)->mat = arg2;
  
}


cv::Mat *_wrap_MagickImageDecodeResponse_mat_get_gocv_ba346308b44e7b91(gocv::MagickImageDecodeResponse *_swig_go_0) {
  gocv::MagickImageDecodeResponse *arg1 = (gocv::MagickImageDecodeResponse *) 0 ;
  cv::Mat result;
  cv::Mat *_swig_go_result;
  
  arg1 = *(gocv::MagickImageDecodeResponse **)&_swig_go_0; 
  
  result =  ((arg1)->mat);
  *(cv::Mat **)&_swig_go_result = new cv::Mat(result); 
  return _swig_go_result;
}


void _wrap_MagickImageDecodeResponse_rows_set_gocv_ba346308b44e7b91(gocv::MagickImageDecodeResponse *_swig_go_0, intgo _swig_go_1) {
  gocv::MagickImageDecodeResponse *arg1 = (gocv::MagickImageDecodeResponse *) 0 ;
  int arg2 ;
  
  arg1 = *(gocv::MagickImageDecodeResponse **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  if (arg1) (arg1)->rows = arg2;
  
}


intgo _wrap_MagickImageDecodeResponse_rows_get_gocv_ba346308b44e7b91(gocv::MagickImageDecodeResponse *_swig_go_0) {
  gocv::MagickImageDecodeResponse *arg1 = (gocv::MagickImageDecodeResponse *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(gocv::MagickImageDecodeResponse **)&_swig_go_0; 
  
  result = (int) ((arg1)->rows);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_MagickImageDecodeResponse_columns_set_gocv_ba346308b44e7b91(gocv::MagickImageDecodeResponse *_swig_go_0, intgo _swig_go_1) {
  gocv::MagickImageDecodeResponse *arg1 = (gocv::MagickImageDecodeResponse *) 0 ;
  int arg2 ;
  
  arg1 = *(gocv::MagickImageDecodeResponse **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  if (arg1) (arg1)->columns = arg2;
  
}


intgo _wrap_MagickImageDecodeResponse_columns_get_gocv_ba346308b44e7b91(gocv::MagickImageDecodeResponse *_swig_go_0) {
  gocv::MagickImageDecodeResponse *arg1 = (gocv::MagickImageDecodeResponse *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(gocv::MagickImageDecodeResponse **)&_swig_go_0; 
  
  result = (int) ((arg1)->columns);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_MagickImageDecodeResponse_magick_set_gocv_ba346308b44e7b91(gocv::MagickImageDecodeResponse *_swig_go_0, _gostring_ _swig_go_1) {
  gocv::MagickImageDecodeResponse *arg1 = (gocv::MagickImageDecodeResponse *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(gocv::MagickImageDecodeResponse **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->magick = *arg2;
  
}


_gostring_ _wrap_MagickImageDecodeResponse_magick_get_gocv_ba346308b44e7b91(gocv::MagickImageDecodeResponse *_swig_go_0) {
  gocv::MagickImageDecodeResponse *arg1 = (gocv::MagickImageDecodeResponse *) 0 ;
  std::string *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(gocv::MagickImageDecodeResponse **)&_swig_go_0; 
  
  result = (std::string *) & ((arg1)->magick);
  _swig_go_result = Swig_AllocateString((*result).data(), (*result).length()); 
  return _swig_go_result;
}


void _wrap_MagickImageDecodeResponse_orientation_type_set_gocv_ba346308b44e7b91(gocv::MagickImageDecodeResponse *_swig_go_0, intgo _swig_go_1) {
  gocv::MagickImageDecodeResponse *arg1 = (gocv::MagickImageDecodeResponse *) 0 ;
  gocv::OrientationType arg2 ;
  
  arg1 = *(gocv::MagickImageDecodeResponse **)&_swig_go_0; 
  arg2 = (gocv::OrientationType)_swig_go_1; 
  
  if (arg1) (arg1)->orientation_type = arg2;
  
}


intgo _wrap_MagickImageDecodeResponse_orientation_type_get_gocv_ba346308b44e7b91(gocv::MagickImageDecodeResponse *_swig_go_0) {
  gocv::MagickImageDecodeResponse *arg1 = (gocv::MagickImageDecodeResponse *) 0 ;
  gocv::OrientationType result;
  intgo _swig_go_result;
  
  arg1 = *(gocv::MagickImageDecodeResponse **)&_swig_go_0; 
  
  result = (gocv::OrientationType) ((arg1)->orientation_type);
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


void _wrap_MagickImageDecodeResponse_colorspace_type_set_gocv_ba346308b44e7b91(gocv::MagickImageDecodeResponse *_swig_go_0, intgo _swig_go_1) {
  gocv::MagickImageDecodeResponse *arg1 = (gocv::MagickImageDecodeResponse *) 0 ;
  gocv::ColorspaceType arg2 ;
  
  arg1 = *(gocv::MagickImageDecodeResponse **)&_swig_go_0; 
  arg2 = (gocv::ColorspaceType)_swig_go_1; 
  
  if (arg1) (arg1)->colorspace_type = arg2;
  
}


intgo _wrap_MagickImageDecodeResponse_colorspace_type_get_gocv_ba346308b44e7b91(gocv::MagickImageDecodeResponse *_swig_go_0) {
  gocv::MagickImageDecodeResponse *arg1 = (gocv::MagickImageDecodeResponse *) 0 ;
  gocv::ColorspaceType result;
  intgo _swig_go_result;
  
  arg1 = *(gocv::MagickImageDecodeResponse **)&_swig_go_0; 
  
  result = (gocv::ColorspaceType) ((arg1)->colorspace_type);
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


gocv::MagickImageDecodeResponse *_wrap_new_MagickImageDecodeResponse_gocv_ba346308b44e7b91() {
  gocv::MagickImageDecodeResponse *result = 0 ;
  gocv::MagickImageDecodeResponse *_swig_go_result;
  
  
  {
    try {
      result = (gocv::MagickImageDecodeResponse *)new gocv::MagickImageDecodeResponse();;
    } catch (const std::exception& e) {
      _swig_gopanic(e.what());
    }
  }
  *(gocv::MagickImageDecodeResponse **)&_swig_go_result = (gocv::MagickImageDecodeResponse *)result; 
  return _swig_go_result;
}


void _wrap_delete_MagickImageDecodeResponse_gocv_ba346308b44e7b91(gocv::MagickImageDecodeResponse *_swig_go_0) {
  gocv::MagickImageDecodeResponse *arg1 = (gocv::MagickImageDecodeResponse *) 0 ;
  
  arg1 = *(gocv::MagickImageDecodeResponse **)&_swig_go_0; 
  
  {
    try {
      delete arg1;;
    } catch (const std::exception& e) {
      _swig_gopanic(e.what());
    }
  }
  
}


gocv::MagicImage *_wrap_new_Wrapped_MagicImage_gocv_ba346308b44e7b91() {
  gocv::MagicImage *result = 0 ;
  gocv::MagicImage *_swig_go_result;
  
  
  {
    try {
      result = (gocv::MagicImage *)new gocv::MagicImage();;
    } catch (const std::exception& e) {
      _swig_gopanic(e.what());
    }
  }
  *(gocv::MagicImage **)&_swig_go_result = (gocv::MagicImage *)result; 
  return _swig_go_result;
}


void _wrap_delete_Wrapped_MagicImage_gocv_ba346308b44e7b91(gocv::MagicImage *_swig_go_0) {
  gocv::MagicImage *arg1 = (gocv::MagicImage *) 0 ;
  
  arg1 = *(gocv::MagicImage **)&_swig_go_0; 
  
  {
    try {
      delete arg1;;
    } catch (const std::exception& e) {
      _swig_gopanic(e.what());
    }
  }
  
}


void _wrap_Wrapped_MagicImage_MagickInitializeMagick_gocv_ba346308b44e7b91(gocv::MagickInitializeMagickRequest *_swig_go_0, gocv::MagickInitializeMagickResponse *_swig_go_1) {
  gocv::MagickInitializeMagickRequest *arg1 = 0 ;
  gocv::MagickInitializeMagickResponse *arg2 = 0 ;
  
  arg1 = *(gocv::MagickInitializeMagickRequest **)&_swig_go_0; 
  arg2 = *(gocv::MagickInitializeMagickResponse **)&_swig_go_1; 
  
  {
    try {
      gocv::MagicImage::MagickInitializeMagick((gocv::MagickInitializeMagickRequest const &)*arg1,*arg2);;
    } catch (const std::exception& e) {
      _swig_gopanic(e.what());
    }
  }
  
}


void _wrap_Wrapped_MagicImage_Wrapped_MagickImageDecode_gocv_ba346308b44e7b91(gocv::MagicImage *_swig_go_0, gocv::MagickImageDecodeRequest *_swig_go_1, gocv::MagickImageDecodeResponse *_swig_go_2) {
  gocv::MagicImage *arg1 = (gocv::MagicImage *) 0 ;
  gocv::MagickImageDecodeRequest *arg2 = 0 ;
  gocv::MagickImageDecodeResponse *arg3 = 0 ;
  
  arg1 = *(gocv::MagicImage **)&_swig_go_0; 
  arg2 = *(gocv::MagickImageDecodeRequest **)&_swig_go_1; 
  arg3 = *(gocv::MagickImageDecodeResponse **)&_swig_go_2; 
  
  {
    try {
      (arg1)->MagickImageDecode((gocv::MagickImageDecodeRequest const &)*arg2,*arg3);;
    } catch (const std::exception& e) {
      _swig_gopanic(e.what());
    }
  }
  
}


#ifdef __cplusplus
}
#endif

