// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: types/code/sdk-go.code.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_types_2fcode_2fsdk_2dgo_2ecode_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_types_2fcode_2fsdk_2dgo_2ecode_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_types_2fcode_2fsdk_2dgo_2ecode_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_types_2fcode_2fsdk_2dgo_2ecode_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_types_2fcode_2fsdk_2dgo_2ecode_2eproto;
namespace sdk {
namespace types {
namespace code {
class CgoError;
struct CgoErrorDefaultTypeInternal;
extern CgoErrorDefaultTypeInternal _CgoError_default_instance_;
}  // namespace code
}  // namespace types
}  // namespace sdk
PROTOBUF_NAMESPACE_OPEN
template<> ::sdk::types::code::CgoError* Arena::CreateMaybeMessage<::sdk::types::code::CgoError>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace sdk {
namespace types {
namespace code {

enum Code : int {
  OK = 0,
  Canceled = 1,
  Unknown = 2,
  InvalidArgument = 3,
  DeadlineExceeded = 4,
  NotFound = 5,
  AlreadyExists = 6,
  PermissionDenied = 7,
  ResourceExhausted = 8,
  FailedPrecondition = 9,
  Aborted = 10,
  OutOfRange = 11,
  Unimplemented = 12,
  Internal = 13,
  Unavailable = 14,
  DataLoss = 15,
  Unauthenticated = 16,
  Code_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Code_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Code_IsValid(int value);
constexpr Code Code_MIN = OK;
constexpr Code Code_MAX = Unauthenticated;
constexpr int Code_ARRAYSIZE = Code_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Code_descriptor();
template<typename T>
inline const std::string& Code_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Code>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Code_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Code_descriptor(), enum_t_value);
}
inline bool Code_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Code* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Code>(
    Code_descriptor(), name, value);
}
// ===================================================================

class CgoError final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sdk.types.code.CgoError) */ {
 public:
  inline CgoError() : CgoError(nullptr) {}
  ~CgoError() override;
  explicit constexpr CgoError(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CgoError(const CgoError& from);
  CgoError(CgoError&& from) noexcept
    : CgoError() {
    *this = ::std::move(from);
  }

  inline CgoError& operator=(const CgoError& from) {
    CopyFrom(from);
    return *this;
  }
  inline CgoError& operator=(CgoError&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CgoError& default_instance() {
    return *internal_default_instance();
  }
  static inline const CgoError* internal_default_instance() {
    return reinterpret_cast<const CgoError*>(
               &_CgoError_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CgoError& a, CgoError& b) {
    a.Swap(&b);
  }
  inline void Swap(CgoError* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CgoError* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CgoError* New() const final {
    return new CgoError();
  }

  CgoError* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CgoError>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CgoError& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CgoError& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CgoError* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sdk.types.code.CgoError";
  }
  protected:
  explicit CgoError(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorMessageFieldNumber = 2,
    kSdkErrorMessageFieldNumber = 4,
    kErrorCodeFieldNumber = 1,
    kSdkErrorCodeFieldNumber = 3,
  };
  // string error_message = 2;
  void clear_error_message();
  const std::string& error_message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error_message();
  PROTOBUF_MUST_USE_RESULT std::string* release_error_message();
  void set_allocated_error_message(std::string* error_message);
  private:
  const std::string& _internal_error_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error_message(const std::string& value);
  std::string* _internal_mutable_error_message();
  public:

  // string sdk_error_message = 4;
  void clear_sdk_error_message();
  const std::string& sdk_error_message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sdk_error_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sdk_error_message();
  PROTOBUF_MUST_USE_RESULT std::string* release_sdk_error_message();
  void set_allocated_sdk_error_message(std::string* sdk_error_message);
  private:
  const std::string& _internal_sdk_error_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sdk_error_message(const std::string& value);
  std::string* _internal_mutable_sdk_error_message();
  public:

  // .sdk.types.code.Code error_code = 1;
  void clear_error_code();
  ::sdk::types::code::Code error_code() const;
  void set_error_code(::sdk::types::code::Code value);
  private:
  ::sdk::types::code::Code _internal_error_code() const;
  void _internal_set_error_code(::sdk::types::code::Code value);
  public:

  // int32 sdk_error_code = 3;
  void clear_sdk_error_code();
  ::PROTOBUF_NAMESPACE_ID::int32 sdk_error_code() const;
  void set_sdk_error_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sdk_error_code() const;
  void _internal_set_sdk_error_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:sdk.types.code.CgoError)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_message_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sdk_error_message_;
  int error_code_;
  ::PROTOBUF_NAMESPACE_ID::int32 sdk_error_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_types_2fcode_2fsdk_2dgo_2ecode_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CgoError

// .sdk.types.code.Code error_code = 1;
inline void CgoError::clear_error_code() {
  error_code_ = 0;
}
inline ::sdk::types::code::Code CgoError::_internal_error_code() const {
  return static_cast< ::sdk::types::code::Code >(error_code_);
}
inline ::sdk::types::code::Code CgoError::error_code() const {
  // @@protoc_insertion_point(field_get:sdk.types.code.CgoError.error_code)
  return _internal_error_code();
}
inline void CgoError::_internal_set_error_code(::sdk::types::code::Code value) {
  
  error_code_ = value;
}
inline void CgoError::set_error_code(::sdk::types::code::Code value) {
  _internal_set_error_code(value);
  // @@protoc_insertion_point(field_set:sdk.types.code.CgoError.error_code)
}

// string error_message = 2;
inline void CgoError::clear_error_message() {
  error_message_.ClearToEmpty();
}
inline const std::string& CgoError::error_message() const {
  // @@protoc_insertion_point(field_get:sdk.types.code.CgoError.error_message)
  return _internal_error_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CgoError::set_error_message(ArgT0&& arg0, ArgT... args) {
 
 error_message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sdk.types.code.CgoError.error_message)
}
inline std::string* CgoError::mutable_error_message() {
  std::string* _s = _internal_mutable_error_message();
  // @@protoc_insertion_point(field_mutable:sdk.types.code.CgoError.error_message)
  return _s;
}
inline const std::string& CgoError::_internal_error_message() const {
  return error_message_.Get();
}
inline void CgoError::_internal_set_error_message(const std::string& value) {
  
  error_message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CgoError::_internal_mutable_error_message() {
  
  return error_message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CgoError::release_error_message() {
  // @@protoc_insertion_point(field_release:sdk.types.code.CgoError.error_message)
  return error_message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CgoError::set_allocated_error_message(std::string* error_message) {
  if (error_message != nullptr) {
    
  } else {
    
  }
  error_message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error_message,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:sdk.types.code.CgoError.error_message)
}

// int32 sdk_error_code = 3;
inline void CgoError::clear_sdk_error_code() {
  sdk_error_code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CgoError::_internal_sdk_error_code() const {
  return sdk_error_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CgoError::sdk_error_code() const {
  // @@protoc_insertion_point(field_get:sdk.types.code.CgoError.sdk_error_code)
  return _internal_sdk_error_code();
}
inline void CgoError::_internal_set_sdk_error_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sdk_error_code_ = value;
}
inline void CgoError::set_sdk_error_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sdk_error_code(value);
  // @@protoc_insertion_point(field_set:sdk.types.code.CgoError.sdk_error_code)
}

// string sdk_error_message = 4;
inline void CgoError::clear_sdk_error_message() {
  sdk_error_message_.ClearToEmpty();
}
inline const std::string& CgoError::sdk_error_message() const {
  // @@protoc_insertion_point(field_get:sdk.types.code.CgoError.sdk_error_message)
  return _internal_sdk_error_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CgoError::set_sdk_error_message(ArgT0&& arg0, ArgT... args) {
 
 sdk_error_message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sdk.types.code.CgoError.sdk_error_message)
}
inline std::string* CgoError::mutable_sdk_error_message() {
  std::string* _s = _internal_mutable_sdk_error_message();
  // @@protoc_insertion_point(field_mutable:sdk.types.code.CgoError.sdk_error_message)
  return _s;
}
inline const std::string& CgoError::_internal_sdk_error_message() const {
  return sdk_error_message_.Get();
}
inline void CgoError::_internal_set_sdk_error_message(const std::string& value) {
  
  sdk_error_message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CgoError::_internal_mutable_sdk_error_message() {
  
  return sdk_error_message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CgoError::release_sdk_error_message() {
  // @@protoc_insertion_point(field_release:sdk.types.code.CgoError.sdk_error_message)
  return sdk_error_message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CgoError::set_allocated_sdk_error_message(std::string* sdk_error_message) {
  if (sdk_error_message != nullptr) {
    
  } else {
    
  }
  sdk_error_message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sdk_error_message,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:sdk.types.code.CgoError.sdk_error_message)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace code
}  // namespace types
}  // namespace sdk

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::sdk::types::code::Code> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::sdk::types::code::Code>() {
  return ::sdk::types::code::Code_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_types_2fcode_2fsdk_2dgo_2ecode_2eproto
