// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gocv/gocv.magick.proto

#include "gocv/gocv.magick.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace sdk {
namespace api {
namespace gocv {
constexpr MagickInitializeMagickRequest::MagickInitializeMagickRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : path_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct MagickInitializeMagickRequestDefaultTypeInternal {
  constexpr MagickInitializeMagickRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MagickInitializeMagickRequestDefaultTypeInternal() {}
  union {
    MagickInitializeMagickRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MagickInitializeMagickRequestDefaultTypeInternal _MagickInitializeMagickRequest_default_instance_;
constexpr MagickInitializeMagickResponse::MagickInitializeMagickResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : error_(nullptr){}
struct MagickInitializeMagickResponseDefaultTypeInternal {
  constexpr MagickInitializeMagickResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MagickInitializeMagickResponseDefaultTypeInternal() {}
  union {
    MagickInitializeMagickResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MagickInitializeMagickResponseDefaultTypeInternal _MagickInitializeMagickResponse_default_instance_;
}  // namespace gocv
}  // namespace api
}  // namespace sdk
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_gocv_2fgocv_2emagick_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_gocv_2fgocv_2emagick_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_gocv_2fgocv_2emagick_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_gocv_2fgocv_2emagick_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sdk::api::gocv::MagickInitializeMagickRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sdk::api::gocv::MagickInitializeMagickRequest, path_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sdk::api::gocv::MagickInitializeMagickResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sdk::api::gocv::MagickInitializeMagickResponse, error_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::sdk::api::gocv::MagickInitializeMagickRequest)},
  { 6, -1, sizeof(::sdk::api::gocv::MagickInitializeMagickResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sdk::api::gocv::_MagickInitializeMagickRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sdk::api::gocv::_MagickInitializeMagickResponse_default_instance_),
};

const char descriptor_table_protodef_gocv_2fgocv_2emagick_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\026gocv/gocv.magick.proto\022\014sdk.api.gocv\032-"
  "api/openapi-spec/types/code/sdk-go.code."
  "proto\"-\n\035MagickInitializeMagickRequest\022\014"
  "\n\004path\030\001 \001(\t\"I\n\036MagickInitializeMagickRe"
  "sponse\022\'\n\005error\030\001 \001(\0132\030.sdk.types.code.C"
  "goErrorB=Z;github.com/kaydxh/golang/pkg/"
  "cgo/api/openapi-spec/gocv;gocvb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_gocv_2fgocv_2emagick_2eproto_deps[1] = {
  &::descriptor_table_api_2fopenapi_2dspec_2ftypes_2fcode_2fsdk_2dgo_2ecode_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_gocv_2fgocv_2emagick_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_gocv_2fgocv_2emagick_2eproto = {
  false, false, 278, descriptor_table_protodef_gocv_2fgocv_2emagick_2eproto, "gocv/gocv.magick.proto", 
  &descriptor_table_gocv_2fgocv_2emagick_2eproto_once, descriptor_table_gocv_2fgocv_2emagick_2eproto_deps, 1, 2,
  schemas, file_default_instances, TableStruct_gocv_2fgocv_2emagick_2eproto::offsets,
  file_level_metadata_gocv_2fgocv_2emagick_2eproto, file_level_enum_descriptors_gocv_2fgocv_2emagick_2eproto, file_level_service_descriptors_gocv_2fgocv_2emagick_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_gocv_2fgocv_2emagick_2eproto_getter() {
  return &descriptor_table_gocv_2fgocv_2emagick_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_gocv_2fgocv_2emagick_2eproto(&descriptor_table_gocv_2fgocv_2emagick_2eproto);
namespace sdk {
namespace api {
namespace gocv {

// ===================================================================

class MagickInitializeMagickRequest::_Internal {
 public:
};

MagickInitializeMagickRequest::MagickInitializeMagickRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sdk.api.gocv.MagickInitializeMagickRequest)
}
MagickInitializeMagickRequest::MagickInitializeMagickRequest(const MagickInitializeMagickRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_path().empty()) {
    path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_path(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:sdk.api.gocv.MagickInitializeMagickRequest)
}

inline void MagickInitializeMagickRequest::SharedCtor() {
path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MagickInitializeMagickRequest::~MagickInitializeMagickRequest() {
  // @@protoc_insertion_point(destructor:sdk.api.gocv.MagickInitializeMagickRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MagickInitializeMagickRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MagickInitializeMagickRequest::ArenaDtor(void* object) {
  MagickInitializeMagickRequest* _this = reinterpret_cast< MagickInitializeMagickRequest* >(object);
  (void)_this;
}
void MagickInitializeMagickRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MagickInitializeMagickRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MagickInitializeMagickRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sdk.api.gocv.MagickInitializeMagickRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  path_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MagickInitializeMagickRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sdk.api.gocv.MagickInitializeMagickRequest.path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MagickInitializeMagickRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sdk.api.gocv.MagickInitializeMagickRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string path = 1;
  if (!this->_internal_path().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sdk.api.gocv.MagickInitializeMagickRequest.path");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_path(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sdk.api.gocv.MagickInitializeMagickRequest)
  return target;
}

size_t MagickInitializeMagickRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sdk.api.gocv.MagickInitializeMagickRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string path = 1;
  if (!this->_internal_path().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_path());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MagickInitializeMagickRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MagickInitializeMagickRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MagickInitializeMagickRequest::GetClassData() const { return &_class_data_; }

void MagickInitializeMagickRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<MagickInitializeMagickRequest *>(to)->MergeFrom(
      static_cast<const MagickInitializeMagickRequest &>(from));
}


void MagickInitializeMagickRequest::MergeFrom(const MagickInitializeMagickRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sdk.api.gocv.MagickInitializeMagickRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_path().empty()) {
    _internal_set_path(from._internal_path());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MagickInitializeMagickRequest::CopyFrom(const MagickInitializeMagickRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sdk.api.gocv.MagickInitializeMagickRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MagickInitializeMagickRequest::IsInitialized() const {
  return true;
}

void MagickInitializeMagickRequest::InternalSwap(MagickInitializeMagickRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &path_, GetArenaForAllocation(),
      &other->path_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata MagickInitializeMagickRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_gocv_2fgocv_2emagick_2eproto_getter, &descriptor_table_gocv_2fgocv_2emagick_2eproto_once,
      file_level_metadata_gocv_2fgocv_2emagick_2eproto[0]);
}

// ===================================================================

class MagickInitializeMagickResponse::_Internal {
 public:
  static const ::sdk::types::code::CgoError& error(const MagickInitializeMagickResponse* msg);
};

const ::sdk::types::code::CgoError&
MagickInitializeMagickResponse::_Internal::error(const MagickInitializeMagickResponse* msg) {
  return *msg->error_;
}
void MagickInitializeMagickResponse::clear_error() {
  if (GetArenaForAllocation() == nullptr && error_ != nullptr) {
    delete error_;
  }
  error_ = nullptr;
}
MagickInitializeMagickResponse::MagickInitializeMagickResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sdk.api.gocv.MagickInitializeMagickResponse)
}
MagickInitializeMagickResponse::MagickInitializeMagickResponse(const MagickInitializeMagickResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_error()) {
    error_ = new ::sdk::types::code::CgoError(*from.error_);
  } else {
    error_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:sdk.api.gocv.MagickInitializeMagickResponse)
}

inline void MagickInitializeMagickResponse::SharedCtor() {
error_ = nullptr;
}

MagickInitializeMagickResponse::~MagickInitializeMagickResponse() {
  // @@protoc_insertion_point(destructor:sdk.api.gocv.MagickInitializeMagickResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MagickInitializeMagickResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete error_;
}

void MagickInitializeMagickResponse::ArenaDtor(void* object) {
  MagickInitializeMagickResponse* _this = reinterpret_cast< MagickInitializeMagickResponse* >(object);
  (void)_this;
}
void MagickInitializeMagickResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MagickInitializeMagickResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MagickInitializeMagickResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sdk.api.gocv.MagickInitializeMagickResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && error_ != nullptr) {
    delete error_;
  }
  error_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MagickInitializeMagickResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .sdk.types.code.CgoError error = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_error(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MagickInitializeMagickResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sdk.api.gocv.MagickInitializeMagickResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sdk.types.code.CgoError error = 1;
  if (this->_internal_has_error()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::error(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sdk.api.gocv.MagickInitializeMagickResponse)
  return target;
}

size_t MagickInitializeMagickResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sdk.api.gocv.MagickInitializeMagickResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sdk.types.code.CgoError error = 1;
  if (this->_internal_has_error()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *error_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MagickInitializeMagickResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MagickInitializeMagickResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MagickInitializeMagickResponse::GetClassData() const { return &_class_data_; }

void MagickInitializeMagickResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<MagickInitializeMagickResponse *>(to)->MergeFrom(
      static_cast<const MagickInitializeMagickResponse &>(from));
}


void MagickInitializeMagickResponse::MergeFrom(const MagickInitializeMagickResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sdk.api.gocv.MagickInitializeMagickResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_error()) {
    _internal_mutable_error()->::sdk::types::code::CgoError::MergeFrom(from._internal_error());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MagickInitializeMagickResponse::CopyFrom(const MagickInitializeMagickResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sdk.api.gocv.MagickInitializeMagickResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MagickInitializeMagickResponse::IsInitialized() const {
  return true;
}

void MagickInitializeMagickResponse::InternalSwap(MagickInitializeMagickResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(error_, other->error_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MagickInitializeMagickResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_gocv_2fgocv_2emagick_2eproto_getter, &descriptor_table_gocv_2fgocv_2emagick_2eproto_once,
      file_level_metadata_gocv_2fgocv_2emagick_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace gocv
}  // namespace api
}  // namespace sdk
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::sdk::api::gocv::MagickInitializeMagickRequest* Arena::CreateMaybeMessage< ::sdk::api::gocv::MagickInitializeMagickRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sdk::api::gocv::MagickInitializeMagickRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sdk::api::gocv::MagickInitializeMagickResponse* Arena::CreateMaybeMessage< ::sdk::api::gocv::MagickInitializeMagickResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sdk::api::gocv::MagickInitializeMagickResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
