// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gocv/v1/gocv.magick.proto

#include "gocv/v1/gocv.magick.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_types_2fsdk_2dgo_2ecode_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CgoError_types_2fsdk_2dgo_2ecode_2eproto;
namespace sdk {
namespace api {
namespace gocv {
namespace v1 {
class MagickInitializeMagickRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MagickInitializeMagickRequest> _instance;
} _MagickInitializeMagickRequest_default_instance_;
class MagickInitializeMagickResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MagickInitializeMagickResponse> _instance;
} _MagickInitializeMagickResponse_default_instance_;
}  // namespace v1
}  // namespace gocv
}  // namespace api
}  // namespace sdk
static void InitDefaultsscc_info_MagickInitializeMagickRequest_gocv_2fv1_2fgocv_2emagick_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sdk::api::gocv::v1::_MagickInitializeMagickRequest_default_instance_;
    new (ptr) ::sdk::api::gocv::v1::MagickInitializeMagickRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sdk::api::gocv::v1::MagickInitializeMagickRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MagickInitializeMagickRequest_gocv_2fv1_2fgocv_2emagick_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MagickInitializeMagickRequest_gocv_2fv1_2fgocv_2emagick_2eproto}, {}};

static void InitDefaultsscc_info_MagickInitializeMagickResponse_gocv_2fv1_2fgocv_2emagick_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sdk::api::gocv::v1::_MagickInitializeMagickResponse_default_instance_;
    new (ptr) ::sdk::api::gocv::v1::MagickInitializeMagickResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sdk::api::gocv::v1::MagickInitializeMagickResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MagickInitializeMagickResponse_gocv_2fv1_2fgocv_2emagick_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MagickInitializeMagickResponse_gocv_2fv1_2fgocv_2emagick_2eproto}, {
      &scc_info_CgoError_types_2fsdk_2dgo_2ecode_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_gocv_2fv1_2fgocv_2emagick_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_gocv_2fv1_2fgocv_2emagick_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_gocv_2fv1_2fgocv_2emagick_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_gocv_2fv1_2fgocv_2emagick_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sdk::api::gocv::v1::MagickInitializeMagickRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sdk::api::gocv::v1::MagickInitializeMagickRequest, path_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sdk::api::gocv::v1::MagickInitializeMagickResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sdk::api::gocv::v1::MagickInitializeMagickResponse, error_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::sdk::api::gocv::v1::MagickInitializeMagickRequest)},
  { 6, -1, sizeof(::sdk::api::gocv::v1::MagickInitializeMagickResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sdk::api::gocv::v1::_MagickInitializeMagickRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sdk::api::gocv::v1::_MagickInitializeMagickResponse_default_instance_),
};

const char descriptor_table_protodef_gocv_2fv1_2fgocv_2emagick_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\031gocv/v1/gocv.magick.proto\022\017sdk.api.goc"
  "v.v1\032\027types/sdk-go.code.proto\"-\n\035MagickI"
  "nitializeMagickRequest\022\014\n\004path\030\001 \001(\t\"I\n\036"
  "MagickInitializeMagickResponse\022\'\n\005error\030"
  "\001 \001(\0132\030.sdk.types.code.CgoErrorB>Z<githu"
  "b.com/kaydxh/golang/pkg/cgo/api/openapi-"
  "spec/gocv/v1;v1b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_gocv_2fv1_2fgocv_2emagick_2eproto_deps[1] = {
  &::descriptor_table_types_2fsdk_2dgo_2ecode_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_gocv_2fv1_2fgocv_2emagick_2eproto_sccs[2] = {
  &scc_info_MagickInitializeMagickRequest_gocv_2fv1_2fgocv_2emagick_2eproto.base,
  &scc_info_MagickInitializeMagickResponse_gocv_2fv1_2fgocv_2emagick_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_gocv_2fv1_2fgocv_2emagick_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_gocv_2fv1_2fgocv_2emagick_2eproto = {
  false, false, descriptor_table_protodef_gocv_2fv1_2fgocv_2emagick_2eproto, "gocv/v1/gocv.magick.proto", 263,
  &descriptor_table_gocv_2fv1_2fgocv_2emagick_2eproto_once, descriptor_table_gocv_2fv1_2fgocv_2emagick_2eproto_sccs, descriptor_table_gocv_2fv1_2fgocv_2emagick_2eproto_deps, 2, 1,
  schemas, file_default_instances, TableStruct_gocv_2fv1_2fgocv_2emagick_2eproto::offsets,
  file_level_metadata_gocv_2fv1_2fgocv_2emagick_2eproto, 2, file_level_enum_descriptors_gocv_2fv1_2fgocv_2emagick_2eproto, file_level_service_descriptors_gocv_2fv1_2fgocv_2emagick_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_gocv_2fv1_2fgocv_2emagick_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_gocv_2fv1_2fgocv_2emagick_2eproto)), true);
namespace sdk {
namespace api {
namespace gocv {
namespace v1 {

// ===================================================================

void MagickInitializeMagickRequest::InitAsDefaultInstance() {
}
class MagickInitializeMagickRequest::_Internal {
 public:
};

MagickInitializeMagickRequest::MagickInitializeMagickRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sdk.api.gocv.v1.MagickInitializeMagickRequest)
}
MagickInitializeMagickRequest::MagickInitializeMagickRequest(const MagickInitializeMagickRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_path().empty()) {
    path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_path(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:sdk.api.gocv.v1.MagickInitializeMagickRequest)
}

void MagickInitializeMagickRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MagickInitializeMagickRequest_gocv_2fv1_2fgocv_2emagick_2eproto.base);
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MagickInitializeMagickRequest::~MagickInitializeMagickRequest() {
  // @@protoc_insertion_point(destructor:sdk.api.gocv.v1.MagickInitializeMagickRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MagickInitializeMagickRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MagickInitializeMagickRequest::ArenaDtor(void* object) {
  MagickInitializeMagickRequest* _this = reinterpret_cast< MagickInitializeMagickRequest* >(object);
  (void)_this;
}
void MagickInitializeMagickRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MagickInitializeMagickRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MagickInitializeMagickRequest& MagickInitializeMagickRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MagickInitializeMagickRequest_gocv_2fv1_2fgocv_2emagick_2eproto.base);
  return *internal_default_instance();
}


void MagickInitializeMagickRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sdk.api.gocv.v1.MagickInitializeMagickRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MagickInitializeMagickRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sdk.api.gocv.v1.MagickInitializeMagickRequest.path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MagickInitializeMagickRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sdk.api.gocv.v1.MagickInitializeMagickRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string path = 1;
  if (this->path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sdk.api.gocv.v1.MagickInitializeMagickRequest.path");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_path(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sdk.api.gocv.v1.MagickInitializeMagickRequest)
  return target;
}

size_t MagickInitializeMagickRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sdk.api.gocv.v1.MagickInitializeMagickRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string path = 1;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_path());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MagickInitializeMagickRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sdk.api.gocv.v1.MagickInitializeMagickRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const MagickInitializeMagickRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MagickInitializeMagickRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sdk.api.gocv.v1.MagickInitializeMagickRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sdk.api.gocv.v1.MagickInitializeMagickRequest)
    MergeFrom(*source);
  }
}

void MagickInitializeMagickRequest::MergeFrom(const MagickInitializeMagickRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sdk.api.gocv.v1.MagickInitializeMagickRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.path().size() > 0) {
    _internal_set_path(from._internal_path());
  }
}

void MagickInitializeMagickRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sdk.api.gocv.v1.MagickInitializeMagickRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MagickInitializeMagickRequest::CopyFrom(const MagickInitializeMagickRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sdk.api.gocv.v1.MagickInitializeMagickRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MagickInitializeMagickRequest::IsInitialized() const {
  return true;
}

void MagickInitializeMagickRequest::InternalSwap(MagickInitializeMagickRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  path_.Swap(&other->path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata MagickInitializeMagickRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MagickInitializeMagickResponse::InitAsDefaultInstance() {
  ::sdk::api::gocv::v1::_MagickInitializeMagickResponse_default_instance_._instance.get_mutable()->error_ = const_cast< ::sdk::types::code::CgoError*>(
      ::sdk::types::code::CgoError::internal_default_instance());
}
class MagickInitializeMagickResponse::_Internal {
 public:
  static const ::sdk::types::code::CgoError& error(const MagickInitializeMagickResponse* msg);
};

const ::sdk::types::code::CgoError&
MagickInitializeMagickResponse::_Internal::error(const MagickInitializeMagickResponse* msg) {
  return *msg->error_;
}
void MagickInitializeMagickResponse::clear_error() {
  if (GetArena() == nullptr && error_ != nullptr) {
    delete error_;
  }
  error_ = nullptr;
}
MagickInitializeMagickResponse::MagickInitializeMagickResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sdk.api.gocv.v1.MagickInitializeMagickResponse)
}
MagickInitializeMagickResponse::MagickInitializeMagickResponse(const MagickInitializeMagickResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_error()) {
    error_ = new ::sdk::types::code::CgoError(*from.error_);
  } else {
    error_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:sdk.api.gocv.v1.MagickInitializeMagickResponse)
}

void MagickInitializeMagickResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MagickInitializeMagickResponse_gocv_2fv1_2fgocv_2emagick_2eproto.base);
  error_ = nullptr;
}

MagickInitializeMagickResponse::~MagickInitializeMagickResponse() {
  // @@protoc_insertion_point(destructor:sdk.api.gocv.v1.MagickInitializeMagickResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MagickInitializeMagickResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete error_;
}

void MagickInitializeMagickResponse::ArenaDtor(void* object) {
  MagickInitializeMagickResponse* _this = reinterpret_cast< MagickInitializeMagickResponse* >(object);
  (void)_this;
}
void MagickInitializeMagickResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MagickInitializeMagickResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MagickInitializeMagickResponse& MagickInitializeMagickResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MagickInitializeMagickResponse_gocv_2fv1_2fgocv_2emagick_2eproto.base);
  return *internal_default_instance();
}


void MagickInitializeMagickResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sdk.api.gocv.v1.MagickInitializeMagickResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && error_ != nullptr) {
    delete error_;
  }
  error_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MagickInitializeMagickResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .sdk.types.code.CgoError error = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_error(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MagickInitializeMagickResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sdk.api.gocv.v1.MagickInitializeMagickResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sdk.types.code.CgoError error = 1;
  if (this->has_error()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::error(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sdk.api.gocv.v1.MagickInitializeMagickResponse)
  return target;
}

size_t MagickInitializeMagickResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sdk.api.gocv.v1.MagickInitializeMagickResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sdk.types.code.CgoError error = 1;
  if (this->has_error()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *error_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MagickInitializeMagickResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sdk.api.gocv.v1.MagickInitializeMagickResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const MagickInitializeMagickResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MagickInitializeMagickResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sdk.api.gocv.v1.MagickInitializeMagickResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sdk.api.gocv.v1.MagickInitializeMagickResponse)
    MergeFrom(*source);
  }
}

void MagickInitializeMagickResponse::MergeFrom(const MagickInitializeMagickResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sdk.api.gocv.v1.MagickInitializeMagickResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_error()) {
    _internal_mutable_error()->::sdk::types::code::CgoError::MergeFrom(from._internal_error());
  }
}

void MagickInitializeMagickResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sdk.api.gocv.v1.MagickInitializeMagickResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MagickInitializeMagickResponse::CopyFrom(const MagickInitializeMagickResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sdk.api.gocv.v1.MagickInitializeMagickResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MagickInitializeMagickResponse::IsInitialized() const {
  return true;
}

void MagickInitializeMagickResponse::InternalSwap(MagickInitializeMagickResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(error_, other->error_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MagickInitializeMagickResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace gocv
}  // namespace api
}  // namespace sdk
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::sdk::api::gocv::v1::MagickInitializeMagickRequest* Arena::CreateMaybeMessage< ::sdk::api::gocv::v1::MagickInitializeMagickRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sdk::api::gocv::v1::MagickInitializeMagickRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sdk::api::gocv::v1::MagickInitializeMagickResponse* Arena::CreateMaybeMessage< ::sdk::api::gocv::v1::MagickInitializeMagickResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sdk::api::gocv::v1::MagickInitializeMagickResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
