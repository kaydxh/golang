// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gocv/v1/gocv.magick.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_gocv_2fv1_2fgocv_2emagick_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_gocv_2fv1_2fgocv_2emagick_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "types/sdk-go.code.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_gocv_2fv1_2fgocv_2emagick_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_gocv_2fv1_2fgocv_2emagick_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_gocv_2fv1_2fgocv_2emagick_2eproto;
namespace sdk {
namespace api {
namespace gocv {
namespace v1 {
class MagickInitializeMagickRequest;
class MagickInitializeMagickRequestDefaultTypeInternal;
extern MagickInitializeMagickRequestDefaultTypeInternal _MagickInitializeMagickRequest_default_instance_;
class MagickInitializeMagickResponse;
class MagickInitializeMagickResponseDefaultTypeInternal;
extern MagickInitializeMagickResponseDefaultTypeInternal _MagickInitializeMagickResponse_default_instance_;
}  // namespace v1
}  // namespace gocv
}  // namespace api
}  // namespace sdk
PROTOBUF_NAMESPACE_OPEN
template<> ::sdk::api::gocv::v1::MagickInitializeMagickRequest* Arena::CreateMaybeMessage<::sdk::api::gocv::v1::MagickInitializeMagickRequest>(Arena*);
template<> ::sdk::api::gocv::v1::MagickInitializeMagickResponse* Arena::CreateMaybeMessage<::sdk::api::gocv::v1::MagickInitializeMagickResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace sdk {
namespace api {
namespace gocv {
namespace v1 {

// ===================================================================

class MagickInitializeMagickRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sdk.api.gocv.v1.MagickInitializeMagickRequest) */ {
 public:
  inline MagickInitializeMagickRequest() : MagickInitializeMagickRequest(nullptr) {}
  virtual ~MagickInitializeMagickRequest();

  MagickInitializeMagickRequest(const MagickInitializeMagickRequest& from);
  MagickInitializeMagickRequest(MagickInitializeMagickRequest&& from) noexcept
    : MagickInitializeMagickRequest() {
    *this = ::std::move(from);
  }

  inline MagickInitializeMagickRequest& operator=(const MagickInitializeMagickRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MagickInitializeMagickRequest& operator=(MagickInitializeMagickRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MagickInitializeMagickRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MagickInitializeMagickRequest* internal_default_instance() {
    return reinterpret_cast<const MagickInitializeMagickRequest*>(
               &_MagickInitializeMagickRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MagickInitializeMagickRequest& a, MagickInitializeMagickRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(MagickInitializeMagickRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MagickInitializeMagickRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MagickInitializeMagickRequest* New() const final {
    return CreateMaybeMessage<MagickInitializeMagickRequest>(nullptr);
  }

  MagickInitializeMagickRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MagickInitializeMagickRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MagickInitializeMagickRequest& from);
  void MergeFrom(const MagickInitializeMagickRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MagickInitializeMagickRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sdk.api.gocv.v1.MagickInitializeMagickRequest";
  }
  protected:
  explicit MagickInitializeMagickRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gocv_2fv1_2fgocv_2emagick_2eproto);
    return ::descriptor_table_gocv_2fv1_2fgocv_2emagick_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 1,
  };
  // string path = 1;
  void clear_path();
  const std::string& path() const;
  void set_path(const std::string& value);
  void set_path(std::string&& value);
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  std::string* mutable_path();
  std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // @@protoc_insertion_point(class_scope:sdk.api.gocv.v1.MagickInitializeMagickRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gocv_2fv1_2fgocv_2emagick_2eproto;
};
// -------------------------------------------------------------------

class MagickInitializeMagickResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sdk.api.gocv.v1.MagickInitializeMagickResponse) */ {
 public:
  inline MagickInitializeMagickResponse() : MagickInitializeMagickResponse(nullptr) {}
  virtual ~MagickInitializeMagickResponse();

  MagickInitializeMagickResponse(const MagickInitializeMagickResponse& from);
  MagickInitializeMagickResponse(MagickInitializeMagickResponse&& from) noexcept
    : MagickInitializeMagickResponse() {
    *this = ::std::move(from);
  }

  inline MagickInitializeMagickResponse& operator=(const MagickInitializeMagickResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MagickInitializeMagickResponse& operator=(MagickInitializeMagickResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MagickInitializeMagickResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MagickInitializeMagickResponse* internal_default_instance() {
    return reinterpret_cast<const MagickInitializeMagickResponse*>(
               &_MagickInitializeMagickResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MagickInitializeMagickResponse& a, MagickInitializeMagickResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MagickInitializeMagickResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MagickInitializeMagickResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MagickInitializeMagickResponse* New() const final {
    return CreateMaybeMessage<MagickInitializeMagickResponse>(nullptr);
  }

  MagickInitializeMagickResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MagickInitializeMagickResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MagickInitializeMagickResponse& from);
  void MergeFrom(const MagickInitializeMagickResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MagickInitializeMagickResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sdk.api.gocv.v1.MagickInitializeMagickResponse";
  }
  protected:
  explicit MagickInitializeMagickResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gocv_2fv1_2fgocv_2emagick_2eproto);
    return ::descriptor_table_gocv_2fv1_2fgocv_2emagick_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 1,
  };
  // .sdk.types.code.CgoError error = 1;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const ::sdk::types::code::CgoError& error() const;
  ::sdk::types::code::CgoError* release_error();
  ::sdk::types::code::CgoError* mutable_error();
  void set_allocated_error(::sdk::types::code::CgoError* error);
  private:
  const ::sdk::types::code::CgoError& _internal_error() const;
  ::sdk::types::code::CgoError* _internal_mutable_error();
  public:
  void unsafe_arena_set_allocated_error(
      ::sdk::types::code::CgoError* error);
  ::sdk::types::code::CgoError* unsafe_arena_release_error();

  // @@protoc_insertion_point(class_scope:sdk.api.gocv.v1.MagickInitializeMagickResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::sdk::types::code::CgoError* error_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gocv_2fv1_2fgocv_2emagick_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MagickInitializeMagickRequest

// string path = 1;
inline void MagickInitializeMagickRequest::clear_path() {
  path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& MagickInitializeMagickRequest::path() const {
  // @@protoc_insertion_point(field_get:sdk.api.gocv.v1.MagickInitializeMagickRequest.path)
  return _internal_path();
}
inline void MagickInitializeMagickRequest::set_path(const std::string& value) {
  _internal_set_path(value);
  // @@protoc_insertion_point(field_set:sdk.api.gocv.v1.MagickInitializeMagickRequest.path)
}
inline std::string* MagickInitializeMagickRequest::mutable_path() {
  // @@protoc_insertion_point(field_mutable:sdk.api.gocv.v1.MagickInitializeMagickRequest.path)
  return _internal_mutable_path();
}
inline const std::string& MagickInitializeMagickRequest::_internal_path() const {
  return path_.Get();
}
inline void MagickInitializeMagickRequest::_internal_set_path(const std::string& value) {
  
  path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void MagickInitializeMagickRequest::set_path(std::string&& value) {
  
  path_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:sdk.api.gocv.v1.MagickInitializeMagickRequest.path)
}
inline void MagickInitializeMagickRequest::set_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:sdk.api.gocv.v1.MagickInitializeMagickRequest.path)
}
inline void MagickInitializeMagickRequest::set_path(const char* value,
    size_t size) {
  
  path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:sdk.api.gocv.v1.MagickInitializeMagickRequest.path)
}
inline std::string* MagickInitializeMagickRequest::_internal_mutable_path() {
  
  return path_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* MagickInitializeMagickRequest::release_path() {
  // @@protoc_insertion_point(field_release:sdk.api.gocv.v1.MagickInitializeMagickRequest.path)
  return path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MagickInitializeMagickRequest::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    
  } else {
    
  }
  path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:sdk.api.gocv.v1.MagickInitializeMagickRequest.path)
}

// -------------------------------------------------------------------

// MagickInitializeMagickResponse

// .sdk.types.code.CgoError error = 1;
inline bool MagickInitializeMagickResponse::_internal_has_error() const {
  return this != internal_default_instance() && error_ != nullptr;
}
inline bool MagickInitializeMagickResponse::has_error() const {
  return _internal_has_error();
}
inline const ::sdk::types::code::CgoError& MagickInitializeMagickResponse::_internal_error() const {
  const ::sdk::types::code::CgoError* p = error_;
  return p != nullptr ? *p : *reinterpret_cast<const ::sdk::types::code::CgoError*>(
      &::sdk::types::code::_CgoError_default_instance_);
}
inline const ::sdk::types::code::CgoError& MagickInitializeMagickResponse::error() const {
  // @@protoc_insertion_point(field_get:sdk.api.gocv.v1.MagickInitializeMagickResponse.error)
  return _internal_error();
}
inline void MagickInitializeMagickResponse::unsafe_arena_set_allocated_error(
    ::sdk::types::code::CgoError* error) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(error_);
  }
  error_ = error;
  if (error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sdk.api.gocv.v1.MagickInitializeMagickResponse.error)
}
inline ::sdk::types::code::CgoError* MagickInitializeMagickResponse::release_error() {
  
  ::sdk::types::code::CgoError* temp = error_;
  error_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::sdk::types::code::CgoError* MagickInitializeMagickResponse::unsafe_arena_release_error() {
  // @@protoc_insertion_point(field_release:sdk.api.gocv.v1.MagickInitializeMagickResponse.error)
  
  ::sdk::types::code::CgoError* temp = error_;
  error_ = nullptr;
  return temp;
}
inline ::sdk::types::code::CgoError* MagickInitializeMagickResponse::_internal_mutable_error() {
  
  if (error_ == nullptr) {
    auto* p = CreateMaybeMessage<::sdk::types::code::CgoError>(GetArena());
    error_ = p;
  }
  return error_;
}
inline ::sdk::types::code::CgoError* MagickInitializeMagickResponse::mutable_error() {
  // @@protoc_insertion_point(field_mutable:sdk.api.gocv.v1.MagickInitializeMagickResponse.error)
  return _internal_mutable_error();
}
inline void MagickInitializeMagickResponse::set_allocated_error(::sdk::types::code::CgoError* error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(error_);
  }
  if (error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(error)->GetArena();
    if (message_arena != submessage_arena) {
      error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    
  } else {
    
  }
  error_ = error;
  // @@protoc_insertion_point(field_set_allocated:sdk.api.gocv.v1.MagickInitializeMagickResponse.error)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace gocv
}  // namespace api
}  // namespace sdk

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_gocv_2fv1_2fgocv_2emagick_2eproto
