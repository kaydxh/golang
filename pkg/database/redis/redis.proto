syntax = "proto3";

package go.pkg.database.redis;
import "google/protobuf/duration.proto";

option go_package = "github.com/kaydxh/golang/pkg/database/redis;redis";

// https://github.com/go-redis/redis/blob/ce40cd942a72c4a93f9025047e6fd3f510700ab3/options.go
message Redis {
  bool enabled = 1;
  // Either a single address or a seed list of host:port addresses
  // of cluster/sentinel nodes.
  repeated string addresses = 2;

  // Database to be selected after connecting to the server.
  // Only single-node and failover clients.
  int64 db = 3;

  // Use the specified Username to authenticate the current connection
  // with one of the connections defined in the ACL list when connecting
  // to a Redis 6.0 instance, or greater, that is using the Redis ACL system.
  string username = 4;

  // Optional password. Must match the password specified in the
  // requirepass server configuration option (if connecting to a Redis 5.0
  // instance, or lower), or the User Password when connecting to a Redis 6.0
  // instance, or greater, that is using the Redis ACL system.
  string password = 5;

  // Maximumumber of retries before giving up.
  // Default is 3 retries.
  int64 max_retries = 7;

  // Minimum backoff between each retry.
  // Default is 8 milliseconds; -1 disables backoff.
  google.protobuf.Duration min_retry_backoff = 8;
  // Maximum backoff between each retry.
  // Default is 512 milliseconds; -1 disables backoff.
  google.protobuf.Duration max_retry_backoff = 9;
  // Dial timeout for establishing new connections.
  // Default is 5 seconds.
  google.protobuf.Duration dial_timeout = 10;
  // Timeout for socket reads. If reached, commands will fail
  // with a timeout instead of blocking. Use value -1 for no timeout and 0 for
  // default. Default is 3 seconds.
  google.protobuf.Duration read_timeout = 11;
  // Timeout for socket writes. If reached, commands will fail
  // with a timeout instead of blocking.
  // Default is ReadTimeout.
  google.protobuf.Duration write_timeout = 12;

  // Maximum number of socket connections.
  // Default is 10 connections per every available CPU as reported by
  // runtime.GOMAXPROCS.
  int64 pool_size = 13;
  // Minimum number of idle connections which is useful when establishing
  // new connection is slow.
  int64 min_idle_conns = 14;
  // Connection age at which client retires (closes) the connection.
  // Default is to not close aged connections.
  google.protobuf.Duration max_conn_age = 15;
  // Amount of time client waits for connection if all connections
  // are busy before returning an error.
  // Default is ReadTimeout + 1 second.
  google.protobuf.Duration pool_timeout = 16;
  // Amount of time after which client closes idle connections.
  // Should be less than server's timeout.
  // Default is 5 minutes. -1 disables idle timeout check.
  google.protobuf.Duration idle_timeout = 17;
  // Frequency of idle checks made by idle connections reaper.
  // Default is 1 minute. -1 disables idle connections reaper,
  // but idle connections are still discarded by the client
  // if IdleTimeout is set.
  google.protobuf.Duration idle_check_frequency = 18;

  // Only cluster clients.
  int64 max_redirects = 19;
  bool read_only = 20;
  // Allows routing read-only commands to the closest master or slave node.
  // This option only works with NewFailoverClusterClient.
  bool route_by_latency = 21;
  // Allows routing read-only commands to the random master or slave node.
  // This option only works with NewFailoverClusterClient.
  bool route_randomly = 22;
  // Route all commands to slave read-only nodes.

  // The sentinel master name.
  // Only failover clients.
  // The master name.
  string master_name = 23;

  google.protobuf.Duration max_wait_duration = 24;
  google.protobuf.Duration fail_after_duration = 25;
}
